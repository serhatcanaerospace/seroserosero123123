import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import json
import math
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np


# -------------------- Yardımcı Fonksiyonlar --------------------
def parse_float(value, field_name=""):
    """Girdiği değeri float'a dönüştürür, hata kontrolü yapar."""
    try:
        return float(value)
    except ValueError:
        raise ValueError(f"'{value}' geçerli bir sayı değil{f' ({field_name})' if field_name else ''}.")


def create_tooltip(widget, text):
    """Basit bir tooltip oluşturur."""
    tooltip = tk.Toplevel(widget)
    tooltip.withdraw()
    tooltip.overrideredirect(True)
    tooltip.attributes("-topmost", True)
    label = ttk.Label(tooltip, text=text, background="yellow", relief='solid', borderwidth=1)
    label.pack()

    def enter(event):
        x = event.x_root + 20
        y = event.y_root + 10
        tooltip.geometry(f"+{x}+{y}")
        tooltip.deiconify()

    def leave(event):
        tooltip.withdraw()

    widget.bind("<Enter>", enter)
    widget.bind("<Leave>", leave)


# -------------------- Global Değişkenler --------------------
# Sıvı yakıt türleri ve varsayılan parametreler
liquid_fuel_defaults = {
    "RP-1 / LOX (355 J/kg*K, γ=1.21)": {
        "yanma_odası_basıncı": "1e6",  # Pa
        "egzoz_cıkış_basıncı": "101325",  # Pa
        "yanma_odası_sıcaklığı": "3500",  # K
        "boğaz_çapı": "51.6",  # mm
        "egzoz_cıkış_çapı": "103.2",  # mm
        "ortam_basıncı": "101325"  # Pa
    },
    "LH2 / LOX (4124 J/kg*K, γ=1.4)": {
        "yanma_odası_basıncı": "2e6",  # Pa
        "egzoz_cıkış_basıncı": "101325",  # Pa
        "yanma_odası_sıcaklığı": "4000",  # K
        "boğaz_çapı": "30",  # mm
        "egzoz_cıkış_çapı": "60",  # mm
        "ortam_basıncı": "101325"  # Pa
    },
    "Methanol / LOX (259 J/kg*K, γ=1.3)": {
        "yanma_odası_basıncı": "1.5e6",  # Pa
        "egzoz_cıkış_basıncı": "101325",  # Pa
        "yanma_odası_sıcaklığı": "3600",  # K
        "boğaz_çapı": "45",  # mm
        "egzoz_cıkış_çapı": "90",  # mm
        "ortam_basıncı": "101325"  # Pa
    },
    "Ethanol / LOX (245 J/kg*K, γ=1.29)": {
        "yanma_odası_basıncı": "1.8e6",  # Pa
        "egzoz_cıkış_basıncı": "101325",  # Pa
        "yanma_odası_sıcaklığı": "3700",  # K
        "boğaz_çapı": "40",  # mm
        "egzoz_cıkış_çapı": "80",  # mm
        "ortam_basıncı": "101325"  # Pa
    },
    "Hydrazine / NTO (273 J/kg*K, γ=1.3)": {
        "yanma_odası_basıncı": "2.2e6",  # Pa
        "egzoz_cıkış_basıncı": "101325",  # Pa
        "yanma_odası_sıcaklığı": "3800",  # K
        "boğaz_çapı": "35",  # mm
        "egzoz_cıkış_çapı": "70",  # mm
        "ortam_basıncı": "101325"  # Pa
    },
    "Aerozine 50 / NTO (258 J/kg*K, γ=1.28)": {
        "yanma_odası_basıncı": "2.5e6",  # Pa
        "egzoz_cıkış_basıncı": "101325",  # Pa
        "yanma_odası_sıcaklığı": "3900",  # K
        "boğaz_çapı": "38",  # mm
        "egzoz_cıkış_çapı": "76",  # mm
        "ortam_basıncı": "101325"  # Pa
    },
    "MMH / NTO (260 J/kg*K, γ=1.27)": {
        "yanma_odası_basıncı": "2.3e6",  # Pa
        "egzoz_cıkış_basıncı": "101325",  # Pa
        "yanma_odası_sıcaklığı": "3850",  # K
        "boğaz_çapı": "37",  # mm
        "egzoz_cıkış_çapı": "74",  # mm
        "ortam_basıncı": "101325"  # Pa
    }
    # Diğer sıvı yakıtlar için de benzer şekilde ekleyebilirsiniz
}

# Katı yakıt türleri ve varsayılan parametreler
solid_fuels = {
    "HTPB": (0.01, 1600, 910),  # (burn_rate [m/s], c_star [m/s], rho [kg/m³])
    "Nitrocellulose": (0.005, 1500, 1320),
    "Ammonium Perchlorate": (0.015, 1700, 1500),
    "Composite Solid Propellant (CSP)": (0.012, 1650, 1000),
    "Double-Based Propellant": (0.008, 1550, 1250),
    "Composite Modified Double-Based (CMDB) Propellant": (0.01, 1580, 1200)
}

# Katı yakıt türleri için varsayılan parametreler
solid_fuel_defaults = {
    "HTPB": {
        "yakıt_uzunluğu": "0.5",  # m
        "yakıt_kalınlığı": "0.2",  # m
        "yanma_hızı": "0.01",  # m/s
        "karakteristik_hız": "1600",  # m/s
        "propellant_yoğunluğu": "910"  # kg/m³
    },
    "Nitrocellulose": {
        "yakıt_uzunluğu": "0.6",  # m
        "yakıt_kalınlığı": "0.035",  # m
        "yanma_hızı": "0.006",  # m/s
        "karakteristik_hız": "1500",  # m/s
        "propellant_yoğunluğu": "1320"  # kg/m³
    },
    "Ammonium Perchlorate": {
        "yakıt_uzunluğu": "0.55",  # m
        "yakıt_kalınlığı": "0.037",  # m
        "yanma_hızı": "0.014",  # m/s
        "karakteristik_hız": "1700",  # m/s
        "propellant_yoğunluğu": "1500"  # kg/m³
    },
    "Composite Solid Propellant (CSP)": {
        "yakıt_uzunluğu": "0.7",  # m
        "yakıt_kalınlığı": "0.25",  # m
        "yanma_hızı": "0.012",  # m/s
        "karakteristik_hız": "1650",  # m/s
        "propellant_yoğunluğu": "1000"  # kg/m³
    },
    "Double-Based Propellant": {
        "yakıt_uzunluğu": "0.65",  # m
        "yakıt_kalınlığı": "0.04",  # m
        "yanma_hızı": "0.008",  # m/s
        "karakteristik_hız": "1550",  # m/s
        "propellant_yoğunluğu": "1250"  # kg/m³
    },
    "Composite Modified Double-Based (CMDB) Propellant": {
        "yakıt_uzunluğu": "0.68",  # m
        "yakıt_kalınlığı": "0.042",  # m
        "yanma_hızı": "0.01",  # m/s
        "karakteristik_hız": "1580",  # m/s
        "propellant_yoğunluğu": "1200"  # kg/m³
    }
    # İhtiyaç duyarsanız daha fazla yakıt türü ekleyebilirsiniz
}

# -------------------- Global Değişkenlerin Başlatılması --------------------
last_calculated_thrust = 0.0
last_calculated_m_dot = 0.0
last_calculated_exit_vel = 0.0
last_burn_rate = 0.0
last_thickness = 0.0
last_chamber_pressure = 0.0


# -------------------- Hesaplama Fonksiyonları --------------------
def calculate_mass_flow_rate_liquid(chamber_pressure, throat_area, R, T, gamma):
    """
    Sıvı yakıt için kütle akış hızını hesaplar.
    """
    # Isentropik akış denklemi
    return throat_area * chamber_pressure / math.sqrt(R * T) * math.sqrt(gamma / (2 * (gamma - 1))) * \
        (2 / (gamma + 1)) ** ((gamma + 1) / (2 * (gamma - 1)))


def calculate_exit_velocity_liquid(chamber_pressure, exit_pressure, T, R, gamma):
    """
    Sıvı yakıt için egzoz hızını hesaplar.
    """
    term1 = (2 * gamma) / (gamma - 1)
    term2 = R * T
    term3 = 1 - (exit_pressure / chamber_pressure) ** ((gamma - 1) / gamma)
    return math.sqrt(term1 * term2 * term3)


def calculate_thrust_liquid(m_dot, exit_velocity, exit_pressure, exit_area, ambient_pressure):
    """
    Sıvı yakıt için itki kuvvetini hesaplar.
    """
    return m_dot * exit_velocity + (exit_pressure - ambient_pressure) * exit_area


def calculate_solid_thrust(length, diameter, burn_rate, c_star, rho, Pe, Pa, Ae):
    """
    Katı yakıt için itki kuvveti ve kütle akış hızını hesaplar.
    """
    A_b = math.pi * diameter * length  # Yanma yüzey alanı (m²)
    m_dot = rho * A_b * burn_rate  # Kütle akış hızı (kg/s)
    thrust = m_dot * c_star + (Pe - Pa) * Ae  # İtki Kuvveti (N)
    return thrust, m_dot


# -------------------- Uygulama Fonksiyonları --------------------
def save_profile():
    """
    Kullanıcı profilini JSON dosyası olarak kaydeder.
    """
    profile = {
        "yakıt_türü": rocket_type_var.get(),
        "sıvı_yakıt_parametreleri": {
            "yakıt_oksitleyici": pair_var.get(),
            "yanma_odası_basıncı": chamber_pressure_entry.get(),
            "egzoz_cıkış_basıncı": exit_pressure_entry.get(),
            "yanma_odası_sıcaklığı": chamber_temperature_entry.get(),
            "boğaz_çapı": throat_diameter_entry.get(),
            "egzoz_cıkış_çapı": exit_diameter_entry.get(),
            "ortam_basıncı": ambient_pressure_entry.get()
        },
        "katı_yakıt_parametreleri": {
            "yakıt_türü": solid_fuel_var.get(),
            "yakıt_uzunluğu": length_entry.get(),
            "yakıt_kalınlığı": thickness_entry.get(),
            "yanma_hızı": burn_rate_entry.get(),
            "karakteristik_hız": cstar_entry.get()
        },
        "zaman_parametreleri": {
            "burn_time": burn_time_entry.get(),
            "time_step": time_step_entry.get()
        }
    }

    file_path = filedialog.asksaveasfilename(defaultextension=".json",
                                             filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
                                             title="Profili Kaydet")
    if file_path:
        try:
            with open(file_path, 'w') as file:
                json.dump(profile, file, indent=4)
            messagebox.showinfo("Başarılı", "Profil JSON dosyasına kaydedildi.")
        except Exception as e:
            messagebox.showerror("Hata", f"Profil kaydedilirken bir hata oluştu.\n{e}")


def load_profile():
    """
    Kullanıcı profilini JSON dosyasından yükler.
    """
    file_path = filedialog.askopenfilename(defaultextension=".json",
                                           filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
                                           title="Profil Yükle")
    if file_path:
        try:
            with open(file_path, 'r') as file:
                profile = json.load(file)

            # Yakıt Türünü Ayarla ve Frame'i Güncelle
            rocket_type_var.set(profile["yakıt_türü"])
            toggle_frames()

            # Sıvı Yakıt Parametrelerini Güncelle
            liquid_params = profile.get("sıvı_yakıt_parametreleri", {})
            pair_var.set(liquid_params.get("yakıt_oksitleyici", "RP-1 / LOX (355 J/kg*K, γ=1.21)"))
            chamber_pressure_entry.delete(0, tk.END)
            chamber_pressure_entry.insert(0, liquid_params.get("yanma_odası_basıncı", "1e6"))
            exit_pressure_entry.delete(0, tk.END)
            exit_pressure_entry.insert(0, liquid_params.get("egzoz_cıkış_basıncı", "101325"))
            chamber_temperature_entry.delete(0, tk.END)
            chamber_temperature_entry.insert(0, liquid_params.get("yanma_odası_sıcaklığı", "3500"))
            throat_diameter_entry.delete(0, tk.END)
            throat_diameter_entry.insert(0, liquid_params.get("boğaz_çapı", "51.6"))
            exit_diameter_entry.delete(0, tk.END)
            exit_diameter_entry.insert(0, liquid_params.get("egzoz_cıkış_çapı", "103.2"))
            ambient_pressure_entry.delete(0, tk.END)
            ambient_pressure_entry.insert(0, liquid_params.get("ortam_basıncı", "101325"))

            # Katı Yakıt Parametrelerini Güncelle
            solid_params = profile.get("katı_yakıt_parametreleri", {})
            solid_fuel_var.set(solid_params.get("yakıt_türü", "HTPB"))
            length_entry.delete(0, tk.END)
            length_entry.insert(0, solid_params.get("yakıt_uzunluğu", "0.5"))
            thickness_entry.delete(0, tk.END)
            thickness_entry.insert(0, solid_params.get("yakıt_kalınlığı", "0.2"))
            burn_rate_entry.delete(0, tk.END)
            burn_rate_entry.insert(0, solid_params.get("yanma_hızı", "0.01"))
            cstar_entry.delete(0, tk.END)
            cstar_entry.insert(0, solid_params.get("karakteristik_hız", "1600"))

            # Zaman Parametrelerini Güncelle
            zaman_params = profile.get("zaman_parametreleri", {})
            burn_time_entry.delete(0, tk.END)
            burn_time_entry.insert(0, zaman_params.get("burn_time", "10"))
            time_step_entry.delete(0, tk.END)
            time_step_entry.insert(0, zaman_params.get("time_step", "1"))

            messagebox.showinfo("Başarılı", "Profil başarıyla yüklendi.")
        except Exception as e:
            messagebox.showerror("Hata", f"Profil yüklenirken bir hata oluştu.\n{e}")


def open_training_module():
    """
    Kullanıcıya eğitim modülünü gösterir. 5 sayfadan oluşur.
    """
    training_window = tk.Toplevel(root)
    training_window.title("Eğitim Modülü")
    training_window.geometry("600x500")

    # Eğitim modülü için sayfa yönetimi
    class TrainingModule:
        def __init__(self, master):
            self.master = master
            self.current_page = 0
            self.pages = []
            self.create_pages()

            # Navigation Buttons
            nav_frame = ttk.Frame(master)
            nav_frame.pack(pady=10)

            self.prev_button = ttk.Button(nav_frame, text="Önceki", command=self.prev_page)
            self.prev_button.grid(row=0, column=0, padx=5)
            self.next_button = ttk.Button(nav_frame, text="Sonraki", command=self.next_page)
            self.next_button.grid(row=0, column=1, padx=5)

            self.display_page(self.current_page)

        def create_pages(self):
            """Eğitim modülü sayfalarını oluşturur."""
            contents = [
                r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 1**

### **1. Roket Motorunun Temel Bileşenleri**
- **Yanma Odası:** Yakıt ve oksitleyicinin karışıp yandığı bölge.
- **Boğaz:** Yanma odasından egzoza doğru daralan nozul bölgesi.
- **Nozzle (Egzoz):** Gazların hızla dışarı atıldığı genişleyen nozul bölgesi.
- **Yakıt ve Oksitleyici Depoları:** Yakıt ve oksitleyicilerin saklandığı depolar.

### **Kaynaklar ve Daha Fazlası**
- [NASA Rocket Propulsion](https://www.nasa.gov/mission_pages/launch/rockets.html)
- [Wikipedia - Roket Motoru](https://tr.wikipedia.org/wiki/Roket_motoru)
""",
                r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 2**

### **2. Roket Motoru Tasarım Prensipleri**
- **Kütle Akış Hızı (ṁ):** Yanma odasından geçerek egzoza çıkan yakıtın kütle miktarı.
- **Egzoz Hızı (v_e):** Yakıtın yanması sonucu oluşan gazların hızıdır.
- **İtki Kuvveti (F):** Roket motorunun ürettiği kuvvet. 
  \[ F = (\dot{m} \cdot v_e) + (P_e - P_a) \cdot A_e \]

### **Termodinamik İlkeler**
- **Isotermik ve Adyabatik Prosesler:** Yanma sürecinde ısı transferi ve basınç değişimleri.
- **Spesifik Gaz Sabiti (R):** Gazın özelliğine bağlı sabit.
- **Isı Kapasitesi Oranları (γ):** Gazın termodinamik davranışını belirler.

### **Kaynaklar ve Daha Fazlası**
- [Roket Bilimi ve Teknolojisi](https://www.sciencedirect.com/topics/engineering/rocket-propulsion)
- [Wikipedia - Termodinamik](https://tr.wikipedia.org/wiki/Termodinamik)
""",
                r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 3**

### **3. Termodinamik Hesaplamalar**
- **Egzoz Hızı Hesaplaması:**
  \[ v_e = \sqrt{\frac{2 \gamma}{\gamma - 1} R T_c \left(1 - \left(\frac{P_e}{P_c}\right)^{\frac{\gamma - 1}{\gamma}}\right)} \]
- **Kütle Akış Hızı Hesaplaması:**
  \[ \dot{m} = \rho \cdot A_t \cdot \sqrt{\gamma \cdot R \cdot T_t} \]
- **İtki Kuvveti Hesaplaması:**
  \[ F = (\dot{m} \cdot v_e) + (P_e - P_a) \cdot A_e \]

### **Gaz Dinamikleri**
- **Choked Flow (Daralma Akışı):** Boğaz alanında maksimum kütle akış hızı.
- **Mach Sayısı:** Hızın ses hızına oranı.
- **Reynolds Sayısı:** Akışın laminer veya türbülanslı olup olmadığını belirler.

### **Kaynaklar ve Daha Fazlası**
- [Thermodynamics in Rocket Engines](https://www.grc.nasa.gov/www/k-12/airplane/mach.html)
- [Wikipedia - Termodinamik](https://tr.wikipedia.org/wiki/Termodinamik)
""",
                r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 4**

### **4. Nozzle Tasarımı ve Egzoz Hızı**
- **Nozzle Tipleri:**
  - **De Laval Nozzle:** Dar boğaz ve geniş egzoz bölgesi ile yüksek egzoz hızları sağlar.
  - **Conical Nozzle:** Basit yapılı, düşük performanslı nozul.
  - **Bell Nozzle:** Yüksek verimlilik ve düşük ses emisyonları için optimize edilmiş nozul.
- **Egzoz Hızı Optimizasyonu:**
  - Nozzle genişleme oranının (exit diameter / throat diameter) doğru ayarlanması.
  - Ortam basıncı ile egzoz çıkış basıncının dengelenmesi.

### **Pratik Örnekler ve Hesaplamalar**
- **Örnek Hesaplama:** RP-1 / LOX çiftli bir roket motoru için itki kuvveti hesaplaması.
- **Grafiklerin Analizi:** İtki kuvveti, kütle akış hızı ve egzoz hızı zamanla nasıl değişir.

### **Kaynaklar ve Daha Fazlası**
- [Rocket Nozzle Design](https://www.grc.nasa.gov/www/k-12/airplane/nozzle.html)
- [Wikipedia - Rocket Nozzle](https://tr.wikipedia.org/wiki/Roket_nozulu)
""",
                r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 5**

### **5. Performans Optimizasyonu ve Kaynaklar**
- **Performans Optimizasyonu:**
  - Hedef itki kuvvetine ulaşmak için parametrelerin ayarlanması.
  - Yanma hızı, yakıt kalınlığı ve yanma odası basıncının optimizasyonu.
- **Optimizasyon Yöntemleri:**
  - Matematiksel yöntemler (Örneğin, Newton-Raphson Yöntemi).
  - Simülasyon ve modelleme teknikleri.
- **Güvenlik ve Testler:**
  - Roket motoru testlerinin güvenli bir şekilde gerçekleştirilmesi.
  - Malzeme seçimi ve dayanıklılık analizleri.

### **Ek Kaynaklar ve Okumalar**
- [Rocket Propulsion Elements by George P. Sutton](https://www.amazon.com/Rocket-Propulsion-Elements-George-Sutton/dp/0071388449)
- [NASA Glenn Research Center - Rocket Propulsion](https://www.grc.nasa.gov/www/k-12/airplane/rocket.html)
- [Wikipedia - Rocket Design](https://tr.wikipedia.org/wiki/Roket_tasarımı)
- [AIAA (American Institute of Aeronautics and Astronautics)](https://www.aiaa.org/)
- [SpaceX Research and Development](https://www.spacex.com/research)

### **Sonuç**
Roket motoru tasarımı ve hesaplamaları, kapsamlı bir bilgi birikimi ve dikkatli planlama gerektirir. Bu eğitim modülü ile temel prensipleri anlamış ve pratik uygulamalar için gerekli araçlara sahip olabilirsiniz.
"""
            ]

            for content in contents:
                frame = tk.Frame(self.master, background="#f0f0f0")
                text_widget = tk.Text(frame, wrap="word", padx=10, pady=10, background="#f0f0f0")
                text_widget.insert(tk.END, content)
                text_widget.config(state=tk.DISABLED)
                text_widget.pack(expand=True, fill='both')
                self.pages.append(frame)

        def display_page(self, page_number):
            """Belirli bir sayfayı gösterir."""
            for i, page in enumerate(self.pages):
                if i == page_number:
                    page.pack(fill='both', expand=True, padx=10, pady=10)
                else:
                    page.pack_forget()

            # Navigation Buttons'ın durumunu ayarla
            if self.current_page == 0:
                self.prev_button.config(state='disabled')
            else:
                self.prev_button.config(state='normal')

            if self.current_page == len(self.pages) - 1:
                self.next_button.config(text="Kapat", command=self.close_window)
            else:
                self.next_button.config(text="Sonraki", command=self.next_page)

        def next_page(self):
            """Sonraki sayfaya geçiş yapar veya pencereyi kapatır."""
            if self.current_page < len(self.pages) - 1:
                self.current_page += 1
                self.display_page(self.current_page)
            else:
                self.close_window()

        def prev_page(self):
            """Önceki sayfaya geçiş yapar."""
            if self.current_page > 0:
                self.current_page -= 1
                self.display_page(self.current_page)

        def close_window(self):
            """Eğitim modülü penceresini kapatır."""
            self.master.destroy()

    TrainingModule(training_window)


def open_optimization_window():
    """
    Kullanıcıya hedef itki kuvveti girmesini sağlayan pencereyi açar.
    """

    def perform_optimization():
        target_thrust = target_entry.get()
        if not target_thrust:
            messagebox.showerror("Hata", "Lütfen hedef itki kuvvetini giriniz.")
            return
        optimize_parameters_function(target_thrust)

    optimize_window = tk.Toplevel(root)
    optimize_window.title("Parametre Optimizasyonu")
    optimize_window.geometry("300x150")

    ttk.Label(optimize_window, text="Hedef İtki Kuvveti (N):").pack(padx=10, pady=20)
    target_entry = ttk.Entry(optimize_window, width=20)
    target_entry.pack(padx=10, pady=5)

    ttk.Button(optimize_window, text="Optimizasyonu Başlat", command=perform_optimization).pack(pady=10)


def open_training_module():
    """
    Kullanıcıya eğitim modülünü gösterir. 5 sayfadan oluşur.
    """
    training_window = tk.Toplevel(root)
    training_window.title("Eğitim Modülü")
    training_window.geometry("600x500")

    # Eğitim modülü için sayfa yönetimi
    class TrainingModule:
        def __init__(self, master):
            self.master = master
            self.current_page = 0
            self.pages = []
            self.create_pages()

            # Navigation Buttons
            nav_frame = ttk.Frame(master)
            nav_frame.pack(pady=10)

            self.prev_button = ttk.Button(nav_frame, text="Önceki", command=self.prev_page)
            self.prev_button.grid(row=0, column=0, padx=5)
            self.next_button = ttk.Button(nav_frame, text="Sonraki", command=self.next_page)
            self.next_button.grid(row=0, column=1, padx=5)

            self.display_page(self.current_page)

        def create_pages(self):
            """Eğitim modülü sayfalarını oluşturur."""
            contents = [
                r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 1**

### **1. Roket Motorunun Temel Bileşenleri**
- **Yanma Odası:** Yakıt ve oksitleyicinin karışıp yandığı bölge.
- **Boğaz:** Yanma odasından egzoza doğru daralan nozul bölgesi.
- **Nozzle (Egzoz):** Gazların hızla dışarı atıldığı genişleyen nozul bölgesi.
- **Yakıt ve Oksitleyici Depoları:** Yakıt ve oksitleyicilerin saklandığı depolar.

### **Kaynaklar ve Daha Fazlası**
- [NASA Rocket Propulsion](https://www.nasa.gov/mission_pages/launch/rockets.html)
- [Wikipedia - Roket Motoru](https://tr.wikipedia.org/wiki/Roket_motoru)
""",
                r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 2**

### **2. Roket Motoru Tasarım Prensipleri**
- **Kütle Akış Hızı (ṁ):** Yanma odasından geçerek egzoza çıkan yakıtın kütle miktarı.
- **Egzoz Hızı (v_e):** Yakıtın yanması sonucu oluşan gazların hızıdır.
- **İtki Kuvveti (F):** Roket motorunun ürettiği kuvvet. 
  \[ F = (\dot{m} \cdot v_e) + (P_e - P_a) \cdot A_e \]

### **Termodinamik İlkeler**
- **Isotermik ve Adyabatik Prosesler:** Yanma sürecinde ısı transferi ve basınç değişimleri.
- **Spesifik Gaz Sabiti (R):** Gazın özelliğine bağlı sabit.
- **Isı Kapasitesi Oranları (γ):** Gazın termodinamik davranışını belirler.

### **Kaynaklar ve Daha Fazlası**
- [Roket Bilimi ve Teknolojisi](https://www.sciencedirect.com/topics/engineering/rocket-propulsion)
- [Wikipedia - Termodinamik](https://tr.wikipedia.org/wiki/Termodinamik)
""",
                r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 3**

### **3. Termodinamik Hesaplamalar**
- **Egzoz Hızı Hesaplaması:**
  \[ v_e = \sqrt{\frac{2 \gamma}{\gamma - 1} R T_c \left(1 - \left(\frac{P_e}{P_c}\right)^{\frac{\gamma - 1}{\gamma}}\right)} \]
- **Kütle Akış Hızı Hesaplaması:**
  \[ \dot{m} = \rho \cdot A_t \cdot \sqrt{\gamma \cdot R \cdot T_t} \]
- **İtki Kuvveti Hesaplaması:**
  \[ F = (\dot{m} \cdot v_e) + (P_e - P_a) \cdot A_e \]

### **Gaz Dinamikleri**
- **Choked Flow (Daralma Akışı):** Boğaz alanında maksimum kütle akış hızı.
- **Mach Sayısı:** Hızın ses hızına oranı.
- **Reynolds Sayısı:** Akışın laminer veya türbülanslı olup olmadığını belirler.

### **Kaynaklar ve Daha Fazlası**
- [Thermodynamics in Rocket Engines](https://www.grc.nasa.gov/www/k-12/airplane/mach.html)
- [Wikipedia - Termodinamik](https://tr.wikipedia.org/wiki/Termodinamik)
""",
                r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 4**

### **4. Nozzle Tasarımı ve Egzoz Hızı**
- **Nozzle Tipleri:**
  - **De Laval Nozzle:** Dar boğaz ve geniş egzoz bölgesi ile yüksek egzoz hızları sağlar.
  - **Conical Nozzle:** Basit yapılı, düşük performanslı nozul.
  - **Bell Nozzle:** Yüksek verimlilik ve düşük ses emisyonları için optimize edilmiş nozul.
- **Egzoz Hızı Optimizasyonu:**
  - Nozzle genişleme oranının (exit diameter / throat diameter) doğru ayarlanması.
  - Ortam basıncı ile egzoz çıkış basıncının dengelenmesi.

### **Pratik Örnekler ve Hesaplamalar**
- **Örnek Hesaplama:** RP-1 / LOX çiftli bir roket motoru için itki kuvveti hesaplaması.
- **Grafiklerin Analizi:** İtki kuvveti, kütle akış hızı ve egzoz hızı zamanla nasıl değişir.

### **Kaynaklar ve Daha Fazlası**
- [Rocket Nozzle Design](https://www.grc.nasa.gov/www/k-12/airplane/nozzle.html)
- [Wikipedia - Rocket Nozzle](https://tr.wikipedia.org/wiki/Roket_nozulu)
""",
                r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 5**

### **5. Performans Optimizasyonu ve Kaynaklar**
- **Performans Optimizasyonu:**
  - Hedef itki kuvvetine ulaşmak için parametrelerin ayarlanması.
  - Yanma hızı, yakıt kalınlığı ve yanma odası basıncının optimizasyonu.
- **Optimizasyon Yöntemleri:**
  - Matematiksel yöntemler (Örneğin, Newton-Raphson Yöntemi).
  - Simülasyon ve modelleme teknikleri.
- **Güvenlik ve Testler:**
  - Roket motoru testlerinin güvenli bir şekilde gerçekleştirilmesi.
  - Malzeme seçimi ve dayanıklılık analizleri.

### **Ek Kaynaklar ve Okumalar**
- [Rocket Propulsion Elements by George P. Sutton](https://www.amazon.com/Rocket-Propulsion-Elements-George-Sutton/dp/0071388449)
- [NASA Glenn Research Center - Rocket Propulsion](https://www.grc.nasa.gov/www/k-12/airplane/rocket.html)
- [Wikipedia - Rocket Design](https://tr.wikipedia.org/wiki/Roket_tasarımı)
- [AIAA (American Institute of Aeronautics and Astronautics)](https://www.aiaa.org/)
- [SpaceX Research and Development](https://www.spacex.com/research)

### **Sonuç**
Roket motoru tasarımı ve hesaplamaları, kapsamlı bir bilgi birikimi ve dikkatli planlama gerektirir. Bu eğitim modülü ile temel prensipleri anlamış ve pratik uygulamalar için gerekli araçlara sahip olabilirsiniz.
"""
            ]

            for content in contents:
                frame = tk.Frame(self.master, background="#f0f0f0")
                text_widget = tk.Text(frame, wrap="word", padx=10, pady=10, background="#f0f0f0")
                text_widget.insert(tk.END, content)
                text_widget.config(state=tk.DISABLED)
                text_widget.pack(expand=True, fill='both')
                self.pages.append(frame)

        def display_page(self, page_number):
            """Belirli bir sayfayı gösterir."""
            for i, page in enumerate(self.pages):
                if i == page_number:
                    page.pack(fill='both', expand=True, padx=10, pady=10)
                else:
                    page.pack_forget()

            # Navigation Buttons'ın durumunu ayarla
            if self.current_page == 0:
                self.prev_button.config(state='disabled')
            else:
                self.prev_button.config(state='normal')

            if self.current_page == len(self.pages) - 1:
                self.next_button.config(text="Kapat", command=self.close_window)
            else:
                self.next_button.config(text="Sonraki", command=self.next_page)

        def next_page(self):
            """Sonraki sayfaya geçiş yapar veya pencereyi kapatır."""
            if self.current_page < len(self.pages) - 1:
                self.current_page += 1
                self.display_page(self.current_page)
            else:
                self.close_window()

        def prev_page(self):
            """Önceki sayfaya geçiş yapar."""
            if self.current_page > 0:
                self.current_page -= 1
                self.display_page(self.current_page)

        def close_window(self):
            """Eğitim modülü penceresini kapatır."""
            self.master.destroy()

    TrainingModule(training_window)


def add_custom_fuel():
    """
    Kullanıcının özel yakıt türleri eklemesine izin verir.
    """

    def save_custom_fuel():
        name = custom_name_entry.get().strip()
        try:
            burn_rate = parse_float(custom_burn_rate_entry.get(), "Yanma Hızı")
            cstar = parse_float(custom_cstar_entry.get(), "Karakteristik Hız")
            rho = parse_float(custom_rho_entry.get(), "Propellant Yoğunluğu")
            if not name:
                raise ValueError("Yakıt adı boş olamaz.")
            if name in solid_fuels:
                raise ValueError("Bu yakıt türü zaten mevcut.")
            solid_fuels[name] = (burn_rate, cstar, rho)
            solid_fuel_defaults[name] = {
                "yakıt_uzunluğu": length_default,
                "yakıt_kalınlığı": thickness_default,
                "yanma_hızı": str(burn_rate),
                "karakteristik_hız": str(cstar),
                "propellant_yoğunluğu": str(rho)
            }
            messagebox.showinfo("Başarılı", f"{name} yakıtı başarıyla eklendi.")
            custom_window.destroy()
            # Yeni yakıtı Combobox'a ekleyelim
            solid_fuel_combo['values'] = list(solid_fuels.keys())
        except ValueError as ve:
            messagebox.showerror("Hata", f"Yakıt eklenemedi.\n{ve}")

    # Varsayılan değerler
    length_default = "0.5"  # m
    thickness_default = "0.2"  # m

    custom_window = tk.Toplevel(root)
    custom_window.title("Özel Yakıt Ekle")
    custom_window.geometry("400x300")

    ttk.Label(custom_window, text="Yakıt Adı:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=10)
    custom_name_entry = ttk.Entry(custom_window, width=25)
    custom_name_entry.grid(row=0, column=1, padx=10, pady=10)

    ttk.Label(custom_window, text="Yanma Hızı (m/s):").grid(row=1, column=0, sticky=tk.W, padx=10, pady=10)
    custom_burn_rate_entry = ttk.Entry(custom_window, width=25)
    custom_burn_rate_entry.grid(row=1, column=1, padx=10, pady=10)

    ttk.Label(custom_window, text="Karakteristik Hız (c*):").grid(row=2, column=0, sticky=tk.W, padx=10, pady=10)
    custom_cstar_entry = ttk.Entry(custom_window, width=25)
    custom_cstar_entry.grid(row=2, column=1, padx=10, pady=10)

    ttk.Label(custom_window, text="Propellant Yoğunluğu (kg/m³):").grid(row=3, column=0, sticky=tk.W, padx=10, pady=10)
    custom_rho_entry = ttk.Entry(custom_window, width=25)
    custom_rho_entry.grid(row=3, column=1, padx=10, pady=10)

    ttk.Button(custom_window, text="Ekle", command=save_custom_fuel).grid(row=4, column=0, columnspan=2, pady=20)


def optimize_parameters_function(target_thrust):
    """
    Optimizasyon algoritması ile hedef itki kuvvetine ulaşmak için parametreleri ayarlar.
    Her yakıt türü için uygun parametreleri optimize eder.
    """
    global last_calculated_thrust, last_calculated_m_dot, last_calculated_exit_vel
    global last_burn_rate, last_thickness, last_chamber_pressure

    try:
        target_thrust = float(target_thrust)
    except ValueError:
        messagebox.showerror("Hata", "Lütfen hedef itki kuvvetini geçerli bir sayı olarak giriniz.")
        return

    if last_calculated_thrust == 0:
        messagebox.showerror("Hata", "Mevcut itki kuvveti sıfır olamaz.")
        return

    chosen_type = rocket_type_var.get()

    if chosen_type == "Katı Yakıt":
        if last_burn_rate == 0 or last_thickness == 0:
            messagebox.showerror("Hata", "Yanma hızı veya yakıt kalınlığı sıfır olamaz.")
            return

        ratio = target_thrust / last_calculated_thrust
        try:
            new_burn_rate = float(last_burn_rate) * math.sqrt(ratio)
            new_thickness = float(last_thickness) * math.sqrt(ratio)
        except ValueError:
            messagebox.showerror("Hata", "Yanma hızı ve yakıt kalınlığı sayısal değerler olmalıdır.")
            return

        burn_rate_entry.delete(0, tk.END)
        burn_rate_entry.insert(0, f"{new_burn_rate:.4f}")

        thickness_entry.delete(0, tk.END)
        thickness_entry.insert(0, f"{new_thickness:.4f}")

        messagebox.showinfo("Başarılı",
                            f"Parametreler hedef itki kuvvetine ulaşmak için optimize edildi.\nYeni Yanma Hızı: {new_burn_rate:.4f} m/s\nYeni Yakıt Kalınlığı: {new_thickness:.4f} m")

        # Hesaplama yap
        calculate()

    elif chosen_type == "Sıvı Yakıt":
        if last_chamber_pressure == 0:
            messagebox.showerror("Hata", "Yanma odası basıncı sıfır olamaz.")
            return

        # Newton-Raphson Yöntemi ile Tek Seferde Optimize Etme
        try:
            # Başlangıç tahmini olarak mevcut basıncı kullan
            chamber_pressure = last_chamber_pressure

            def thrust_difference(chamber_pressure):
                return calculate_thrust_for_pressure(chamber_pressure) - target_thrust

            # Tolerans ve maksimum iterasyon sayısı
            tolerance = 1e-2
            max_iterations = 100

            for _ in range(max_iterations):
                f = thrust_difference(chamber_pressure)
                # Kök bulunmuşsa dur
                if abs(f) <= tolerance:
                    break
                # Türevi hesapla
                delta = 1e-3  # Küçük bir değişiklik
                f_derivative = (thrust_difference(chamber_pressure + delta) - f) / delta
                if f_derivative == 0:
                    raise ValueError("Türevin sıfır olduğu bir noktaya ulaşıldı.")
                # Yeni tahmin
                chamber_pressure -= f / f_derivative
            else:
                messagebox.showwarning("Uyarı", "Optimizasyon iterasyon sayısını aştı.")

            # Sonuçları güncelle
            chamber_pressure_entry.delete(0, tk.END)
            chamber_pressure_entry.insert(0, f"{chamber_pressure:.2f}")

            messagebox.showinfo("Başarılı",
                                f"Parametreler hedef itki kuvvetine ulaşmak için optimize edildi.\nYeni Yanma Odası Basıncı: {chamber_pressure:.2f} Pa")

            # Hesaplama yap
            calculate()

        except Exception as e:
            messagebox.showerror("Hata", f"Optimizasyon sırasında bir hata oluştu.\n{e}")

    else:
        messagebox.showwarning("Uyarı", "Lütfen bir yakıt türü seçin.")


def calculate_thrust_for_pressure(chamber_pressure):
    """
    Verilen yanma odası basıncı için itki kuvvetini hesaplar.
    """
    try:
        # Sıvı yakıt parametrelerini al
        fuel_oxidizer_pair = pair_var.get()
        exit_pressure = parse_float(exit_pressure_entry.get(), "Egzoz Çıkış Basıncı")
        chamber_temperature = parse_float(chamber_temperature_entry.get(), "Yanma Odası Sıcaklığı")
        throat_diameter = parse_float(throat_diameter_entry.get(), "Boğaz Çapı") / 1000  # mm to m
        exit_diameter = parse_float(exit_diameter_entry.get(), "Egzoz Çıkış Çapı") / 1000  # mm to m
        ambient_pressure = parse_float(ambient_pressure_entry.get(), "Ortam Basıncı")

        # Sıvı yakıta dair sabit değerler (yakıt/oksitleyici seçimi vs.)
        fuel_oxidizer_pairs = {
            "RP-1 / LOX (355 J/kg*K, γ=1.21)": (355, 1.21),
            "LH2 / LOX (4124 J/kg*K, γ=1.4)": (4124, 1.4),
            "Methanol / LOX (259 J/kg*K, γ=1.3)": (259, 1.3),
            "Ethanol / LOX (245 J/kg*K, γ=1.29)": (245, 1.29),
            "Hydrazine / NTO (273 J/kg*K, γ=1.3)": (273, 1.3),
            "Aerozine 50 / NTO (258 J/kg*K, γ=1.28)": (258, 1.28),
            "MMH / NTO (260 J/kg*K, γ=1.27)": (260, 1.27)
        }

        if fuel_oxidizer_pair not in fuel_oxidizer_pairs:
            raise ValueError("Geçersiz yakıt/oksitleyici çifti.")

        specific_gas_constant, gamma = fuel_oxidizer_pairs[fuel_oxidizer_pair]

        # Boğaz ve egzoz alanları
        throat_area = math.pi * (throat_diameter / 2) ** 2
        exit_area = math.pi * (exit_diameter / 2) ** 2

        # Kütle akış hızı ve egzoz hızı hesapla
        m_dot = calculate_mass_flow_rate_liquid(chamber_pressure, throat_area,
                                                specific_gas_constant, chamber_temperature, gamma)
        exit_vel = calculate_exit_velocity_liquid(chamber_pressure, exit_pressure,
                                                  chamber_temperature, specific_gas_constant, gamma)
        thrust = calculate_thrust_liquid(m_dot, exit_vel,
                                         exit_pressure, exit_area, ambient_pressure)

        return thrust
    except ValueError as ve:
        raise ValueError(f"Hesaplama sırasında bir hata oluştu: {ve}")
    except Exception as e:
        raise Exception(f"Beklenmeyen bir hata oluştu: {e}")


def plot_thrust_graph():
    """
    İtki Kuvveti Grafiğini çizer ve yeni bir pencere açar.
    """
    if not thrust_list:
        messagebox.showerror("Hata", "Lütfen önce hesaplama yapınız.")
        return

    graph_window = tk.Toplevel(root)
    graph_window.title("İtki Kuvveti Grafiği")
    graph_window.geometry("600x400")

    fig, ax = plt.subplots(figsize=(6, 4))
    ax.plot(time_points, thrust_list, color='tab:blue')
    ax.set_xlabel('Zaman (s)')
    ax.set_ylabel('İtki Kuvveti (N)')
    ax.set_title('İtki Kuvveti Zaman Serisi')
    ax.grid(True)

    canvas = FigureCanvasTkAgg(fig, master=graph_window)
    canvas.draw()
    canvas.get_tk_widget().pack(fill='both', expand=True)


def plot_mass_flow_graph():
    """
    Kütle Akış Hızı Grafiğini çizer ve yeni bir pencere açar.
    """
    if not m_dot_list:
        messagebox.showerror("Hata", "Lütfen önce hesaplama yapınız.")
        return

    graph_window = tk.Toplevel(root)
    graph_window.title("Kütle Akış Hızı Grafiği")
    graph_window.geometry("600x400")

    fig, ax = plt.subplots(figsize=(6, 4))
    ax.plot(time_points, m_dot_list, color='tab:green')
    ax.set_xlabel('Zaman (s)')
    ax.set_ylabel('Kütle Akış Hızı (kg/s)')
    ax.set_title('Kütle Akış Hızı Zaman Serisi')
    ax.grid(True)

    canvas = FigureCanvasTkAgg(fig, master=graph_window)
    canvas.draw()
    canvas.get_tk_widget().pack(fill='both', expand=True)


def plot_exit_velocity_graph():
    """
    Egzoz Hızı Grafiğini çizer ve yeni bir pencere açar.
    """
    if not exit_vel_list:
        messagebox.showerror("Hata", "Lütfen önce hesaplama yapınız.")
        return

    graph_window = tk.Toplevel(root)
    graph_window.title("Egzoz Hızı Grafiği")
    graph_window.geometry("600x400")

    fig, ax = plt.subplots(figsize=(6, 4))
    ax.plot(time_points, exit_vel_list, color='tab:red')
    ax.set_xlabel('Zaman (s)')
    ax.set_ylabel('Egzoz Hızı (m/s)')
    ax.set_title('Egzoz Hızı Zaman Serisi')
    ax.grid(True)

    canvas = FigureCanvasTkAgg(fig, master=graph_window)
    canvas.draw()
    canvas.get_tk_widget().pack(fill='both', expand=True)


def calculate():
    """
    Kullanıcı tarafından girilen parametrelere göre hesaplamaları yapar ve sonuçları günceller.
    """
    global last_calculated_thrust, last_calculated_m_dot, last_calculated_exit_vel
    global last_burn_rate, last_thickness, last_chamber_pressure
    global thrust_list, m_dot_list, exit_vel_list, time_points

    thrust_list = []
    m_dot_list = []
    exit_vel_list = []
    time_points = []

    # Hangi yakıt türü seçilmiş?
    chosen_type = rocket_type_var.get()

    # Yeni Girdiler
    try:
        burn_time = parse_float(burn_time_entry.get(), "Yanma Süresi")
        if burn_time <= 0:
            raise ValueError("Yanma süresi pozitif bir sayı olmalıdır.")
    except ValueError as ve:
        messagebox.showerror("Hata", f"Lütfen geçerli bir yanma süresi giriniz.\n{ve}")
        return

    try:
        time_step = parse_float(time_step_entry.get(), "Zaman Adımı")
        if time_step <= 0:
            raise ValueError("Zaman adımı pozitif bir sayı olmalıdır.")
    except ValueError as ve:
        messagebox.showerror("Hata", f"Lütfen geçerli bir zaman adımı giriniz.\n{ve}")
        return

    # Zaman Dizisi Oluştur
    time_points = np.arange(0, burn_time + time_step, time_step)

    if chosen_type == "Sıvı Yakıt":
        try:
            # Sıvı yakıt parametrelerini al
            fuel_oxidizer_pair = pair_var.get()
            chamber_pressure = parse_float(chamber_pressure_entry.get(), "Yanma Odası Basıncı")
            exit_pressure = parse_float(exit_pressure_entry.get(), "Egzoz Çıkış Basıncı")
            chamber_temperature = parse_float(chamber_temperature_entry.get(), "Yanma Odası Sıcaklığı")
            throat_diameter = parse_float(throat_diameter_entry.get(), "Boğaz Çapı") / 1000  # mm to m
            exit_diameter = parse_float(exit_diameter_entry.get(), "Egzoz Çıkış Çapı") / 1000  # mm to m
            ambient_pressure = parse_float(ambient_pressure_entry.get(), "Ortam Basıncı")

            # Sıvı yakıta dair sabit değerler (yakıt/oksitleyici seçimi vs.)
            fuel_oxidizer_pairs = {
                "RP-1 / LOX (355 J/kg*K, γ=1.21)": (355, 1.21),
                "LH2 / LOX (4124 J/kg*K, γ=1.4)": (4124, 1.4),
                "Methanol / LOX (259 J/kg*K, γ=1.3)": (259, 1.3),
                "Ethanol / LOX (245 J/kg*K, γ=1.29)": (245, 1.29),
                "Hydrazine / NTO (273 J/kg*K, γ=1.3)": (273, 1.3),
                "Aerozine 50 / NTO (258 J/kg*K, γ=1.28)": (258, 1.28),
                "MMH / NTO (260 J/kg*K, γ=1.27)": (260, 1.27)
            }

            if fuel_oxidizer_pair not in fuel_oxidizer_pairs:
                raise ValueError("Geçersiz yakıt/oksitleyici çifti.")

            specific_gas_constant, gamma = fuel_oxidizer_pairs[fuel_oxidizer_pair]

            # Boğaz ve egzoz alanları
            throat_area = math.pi * (throat_diameter / 2) ** 2
            exit_area = math.pi * (exit_diameter / 2) ** 2

            for t in time_points:
                # Parametrelerin zamanla değişmediğini varsayıyoruz.
                m_dot = calculate_mass_flow_rate_liquid(chamber_pressure, throat_area,
                                                        specific_gas_constant, chamber_temperature, gamma)
                exit_vel = calculate_exit_velocity_liquid(chamber_pressure, exit_pressure,
                                                          chamber_temperature, specific_gas_constant, gamma)
                thrust = calculate_thrust_liquid(m_dot, exit_vel,
                                                 exit_pressure, exit_area, ambient_pressure)

                thrust_list.append(thrust)
                m_dot_list.append(m_dot)
                exit_vel_list.append(exit_vel)

            # Toplam İtki Hesaplama
            total_impulse = sum([f * time_step for f in thrust_list])

            # Toplam Yakıt Tüketimi Hesaplama
            total_mass_consumed = last_calculated_m_dot * burn_time  # Eğer m_dot sabitse

            # Sonuçları göster
            result_text.set(
                f"Seçilen Yakıt: {fuel_oxidizer_pair}\n"
                f"Toplam Yanma Süresi: {burn_time} s\n"
                f"Kütle Akış Hızı (Ortalama): {np.mean(m_dot_list):.2f} kg/s\n"
                f"Egzoz Hızı (Ortalama): {np.mean(exit_vel_list):.2f} m/s\n"
                f"İtki Kuvveti (Ortalama): {np.mean(thrust_list):.2f} N\n"
                f"Toplam İtki: {total_impulse:.2f} Ns\n"
                f"Toplam Yakıt Tüketimi: {total_mass_consumed:.2f} kg\n"
                f"Yanma Odası Basıncı: {chamber_pressure:.2f} Pa\n"
                f"Egzoz Çıkış Basıncı: {exit_pressure:.2f} Pa\n"
                f"Ortam Basıncı: {ambient_pressure:.2f} Pa\n"
                f"Boğaz Çapı: {throat_diameter:.2f} m\n"
                f"Egzoz Çıkış Çapı: {exit_diameter:.2f} m\n"
                f"Yanma Odası Sıcaklığı: {chamber_temperature:.2f} K"
            )

            # Global değişkenleri güncelle
            last_calculated_thrust = np.mean(thrust_list)
            last_calculated_m_dot = np.mean(m_dot_list)
            last_calculated_exit_vel = np.mean(exit_vel_list)
            # Sıvı yakıt için yanma hızı ve kalınlığı uygun değil, sıfır olarak bırakıyoruz
            last_burn_rate = 0
            last_thickness = 0
            last_chamber_pressure = chamber_pressure  # Sıvı yakıt için en son basıncı kaydediyoruz

        except ValueError as ve:
            messagebox.showerror("Hata", f"Lütfen girişlerinizi kontrol edin.\n{ve}")
        except Exception as e:
            messagebox.showerror("Hata", f"Bir hata oluştu:\n{e}")

    elif chosen_type == "Katı Yakıt":
        try:
            # Katı yakıt parametrelerini al
            selected_fuel = solid_fuel_var.get()
            if selected_fuel not in solid_fuels:
                raise ValueError("Geçersiz yakıt türü seçildi.")

            length = parse_float(length_entry.get(), "Yakıt Uzunluğu")  # m
            thickness = parse_float(thickness_entry.get(), "Yakıt Kalınlığı")  # m
            burn_rate = parse_float(burn_rate_entry.get(), "Yanma Hızı")  # m/s
            cstar_val = parse_float(cstar_entry.get(), "Karakteristik Hız")  # m/s

            # Propellant Yoğunluğunu al
            if selected_fuel in solid_fuel_defaults:
                rho = parse_float(solid_fuel_defaults[selected_fuel].get("propellant_yoğunluğu", "910"),
                                  "Propellant Yoğunluğu")  # kg/m³
            else:
                rho = 910  # Varsayılan değer

            # Yanma odası ve egzoz çıkış basıncı (Sabit, atmosferik)
            Pe = 101325  # Pa
            Pa = 101325  # Pa
            # exit_area katı yakıt için genellikle farklı olabilir, buradan çıkış çapını kullanıyoruz
            try:
                exit_diameter = parse_float(exit_diameter_entry.get(), "Egzoz Çıkış Çapı") / 1000  # mm to m
                Ae = math.pi * (exit_diameter / 2) ** 2
            except ValueError:
                Ae = 1  # Varsayılan değer

            # Yanma hızı ve karakteristik hızın mantıklı olup olmadığını kontrol et
            if not (0.005 <= burn_rate <= 0.02):
                messagebox.showwarning("Uyarı", "Yanma hızı (burn rate) genellikle 0.005 - 0.02 m/s aralığındadır.")
            if not (1400 <= cstar_val <= 2000):
                messagebox.showwarning("Uyarı", "Karakteristik hız (c*) genellikle 1400 - 2000 m/s aralığındadır.")

            # İtki ve kütle akış hızı hesapla
            thrust, m_dot = calculate_solid_thrust(length, thickness, burn_rate, cstar_val, rho, Pe, Pa, Ae)
            for t in time_points:
                thrust_list.append(thrust)
                m_dot_list.append(m_dot)
                exit_vel_list.append(cstar_val)  # Katı yakıtta c* kullanıyoruz

            # Toplam İtki Hesaplama
            total_impulse = sum([f * time_step for f in thrust_list])

            # Toplam Yakıt Tüketimi Hesaplama
            total_mass_consumed = m_dot * burn_time

            # Sonuçları göster
            result_text.set(
                f"Katı Yakıt Seçildi: {selected_fuel}\n"
                f"Toplam Yanma Süresi: {burn_time} s\n"
                f"İtki Kuvveti (Ortalama): {np.mean(thrust_list):.2f} N\n"
                f"Kütle Akış Hızı (Ortalama): {np.mean(m_dot_list):.2f} kg/s\n"
                f"Karakteristik Hız (c*): {cstar_val:.2f} m/s\n"
                f"Toplam İtki: {total_impulse:.2f} Ns\n"
                f"Toplam Yakıt Tüketimi: {total_mass_consumed:.2f} kg\n"
                f"Yakıt Uzunluğu: {length:.2f} m\n"
                f"Yakıt Kalınlığı: {thickness:.2f} m\n"
                f"Propellant Yoğunluğu: {rho:.2f} kg/m³"
            )

            # Global değişkenleri güncelle
            last_calculated_thrust = np.mean(thrust_list)
            last_calculated_m_dot = np.mean(m_dot_list)
            last_calculated_exit_vel = cstar_val
            last_burn_rate = burn_rate
            last_thickness = thickness
            last_chamber_pressure = 0  # Katı yakıt için sıfır

        except ValueError as ve:
            messagebox.showerror("Hata", f"Lütfen girişlerinizi kontrol edin.\n{ve}")
        except Exception as e:
            messagebox.showerror("Hata", f"Bir hata oluştu:\n{e}")
    else:
        messagebox.showwarning("Uyarı", "Lütfen bir yakıt türü seçin.")


# -------------------- Toggle Frames Fonksiyonu --------------------
def toggle_frames(event=None):
    """
    Yakıt türüne göre uygun frame'i gösterir/gizler ve varsayılan parametreleri yükler.
    """
    chosen_type = rocket_type_var.get()
    if chosen_type == "Sıvı Yakıt":
        liquid_frame.grid(row=1, column=0, columnspan=2, pady=5, sticky="ew")
        solid_frame.grid_remove()
        load_liquid_defaults(pair_var.get())
    elif chosen_type == "Katı Yakıt":
        liquid_frame.grid_remove()
        solid_frame.grid(row=2, column=0, columnspan=2, pady=5, sticky="ew")
        load_solid_defaults(solid_fuel_var.get())
    else:
        liquid_frame.grid_remove()
        solid_frame.grid_remove()


def load_liquid_defaults(fuel_pair):
    """
    Seçilen sıvı yakıt için varsayılan parametreleri yükler.
    """
    defaults = liquid_fuel_defaults.get(fuel_pair, {})
    chamber_pressure_entry.delete(0, tk.END)
    chamber_pressure_entry.insert(0, defaults.get("yanma_odası_basıncı", "1e6"))
    exit_pressure_entry.delete(0, tk.END)
    exit_pressure_entry.insert(0, defaults.get("egzoz_cıkış_basıncı", "101325"))
    chamber_temperature_entry.delete(0, tk.END)
    chamber_temperature_entry.insert(0, defaults.get("yanma_odası_sıcaklığı", "3500"))
    throat_diameter_entry.delete(0, tk.END)
    throat_diameter_entry.insert(0, defaults.get("boğaz_çapı", "51.6"))
    exit_diameter_entry.delete(0, tk.END)
    exit_diameter_entry.insert(0, defaults.get("egzoz_cıkış_çapı", "103.2"))
    ambient_pressure_entry.delete(0, tk.END)
    ambient_pressure_entry.insert(0, defaults.get("ortam_basıncı", "101325"))


def load_solid_defaults(fuel_type):
    """
    Seçilen katı yakıt için varsayılan parametreleri yükler.
    """
    defaults = solid_fuel_defaults.get(fuel_type, {})
    length_entry.delete(0, tk.END)
    length_entry.insert(0, defaults.get("yakıt_uzunluğu", "0.5"))
    thickness_entry.delete(0, tk.END)
    thickness_entry.insert(0, defaults.get("yakıt_kalınlığı", "0.2"))
    burn_rate_entry.delete(0, tk.END)
    burn_rate_entry.insert(0, defaults.get("yanma_hızı", "0.01"))
    cstar_entry.delete(0, tk.END)
    cstar_entry.insert(0, defaults.get("karakteristik_hız", "1600"))


def on_solid_fuel_selected(event):
    """
    Katı yakıt türü seçildiğinde ilgili parametreleri otomatik doldurur.
    """
    selected_fuel = solid_fuel_var.get()
    if selected_fuel in solid_fuels:
        burn_rate, cstar, rho = solid_fuels[selected_fuel]
        burn_rate_entry.delete(0, tk.END)
        burn_rate_entry.insert(0, str(burn_rate))
        cstar_entry.delete(0, tk.END)
        cstar_entry.insert(0, str(cstar))
        load_solid_defaults(selected_fuel)
    else:
        burn_rate_entry.delete(0, tk.END)
        cstar_entry.delete(0, tk.END)


def create_profile_management():
    """
    Kullanıcıların profillerini kaydetme ve yükleme arayüzünü oluşturur.
    """
    profile_frame = ttk.LabelFrame(mainframe, text="Kullanıcı Profilleri")
    profile_frame.grid(row=4, column=0, columnspan=2, pady=10, sticky="ew")

    ttk.Button(profile_frame, text="Profili Kaydet", command=save_profile).grid(row=0, column=0, padx=5, pady=5,
                                                                                sticky="ew")
    ttk.Button(profile_frame, text="Profili Yükle", command=load_profile).grid(row=0, column=1, padx=5, pady=5,
                                                                               sticky="ew")

    ttk.Button(profile_frame, text="Parametre Optimizasyonu", command=open_optimization_window).grid(row=1, column=0,
                                                                                                     columnspan=2,
                                                                                                     pady=5,
                                                                                                     sticky="ew")


def initialize_defaults():
    """
    Başlangıçta varsayılan yakıt parametrelerini yükler.
    """
    chosen_type = rocket_type_var.get()
    if chosen_type == "Sıvı Yakıt":
        load_liquid_defaults(pair_var.get())
    elif chosen_type == "Katı Yakıt":
        load_solid_defaults(solid_fuel_var.get())


# -------------------- TKINTER ARAYÜZ KURULUMU --------------------
def main():
    global root, rocket_type_var, pair_var, solid_fuel_var
    global chamber_pressure_entry, exit_pressure_entry, chamber_temperature_entry, throat_diameter_entry, exit_diameter_entry, ambient_pressure_entry
    global solid_fuel_combo, length_entry, thickness_entry, burn_rate_entry, cstar_entry
    global burn_time_entry, time_step_entry
    global result_text, calculate_button, thrust_list, m_dot_list, exit_vel_list, time_points
    global last_calculated_thrust, last_calculated_m_dot, last_calculated_exit_vel
    global last_burn_rate, last_thickness, last_chamber_pressure
    global mainframe, liquid_frame, solid_frame

    root = tk.Tk()
    root.title("Roket Motoru Hesaplama (Katı / Sıvı)")
    root.geometry("1200x800")  # Daha geniş bir pencere boyutu belirledik
    root.minsize(1000, 700)  # Minimum boyut belirleyerek küçük ekranlarda da düzgün görünmesini sağladık

    # Split the main window into left and right frames
    main_paned = ttk.PanedWindow(root, orient=tk.HORIZONTAL)
    main_paned.pack(fill=tk.BOTH, expand=True)

    # Left frame for parameters and controls
    left_frame = ttk.Frame(main_paned, relief=tk.SUNKEN)
    main_paned.add(left_frame, weight=1)

    # Right frame for calculation results and graphs
    right_frame = ttk.Frame(main_paned, relief=tk.SUNKEN)
    main_paned.add(right_frame, weight=1)

    # Create a scrollable canvas inside the left frame
    canvas_left = tk.Canvas(left_frame, borderwidth=0, background="#f0f0f0")
    scrollbar_left = ttk.Scrollbar(left_frame, orient="vertical", command=canvas_left.yview)
    scrollable_frame = ttk.Frame(canvas_left, padding="10")

    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas_left.configure(
            scrollregion=canvas_left.bbox("all")
        )
    )

    canvas_left.create_window((0, 0), window=scrollable_frame, anchor="nw")
    canvas_left.configure(yscrollcommand=scrollbar_left.set)

    canvas_left.pack(side="left", fill="both", expand=True)
    scrollbar_left.pack(side="right", fill="y")

    # Add mouse wheel scrolling
    def _on_mousewheel(event):
        if root.tk.call('tk', 'windowingsystem') == 'win32':
            canvas_left.yview_scroll(int(-1 * (event.delta / 120)), "units")
        elif root.tk.call('tk', 'windowingsystem') == 'x11':
            if event.num == 4:
                canvas_left.yview_scroll(-1, "units")
            elif event.num == 5:
                canvas_left.yview_scroll(1, "units")
        elif root.tk.call('tk', 'windowingsystem') == 'aqua':
            canvas_left.yview_scroll(int(-1 * (event.delta)), "units")

    canvas_left.bind_all("<MouseWheel>", _on_mousewheel)
    canvas_left.bind_all("<Button-4>", _on_mousewheel)
    canvas_left.bind_all("<Button-5>", _on_mousewheel)

    # Set mainframe to scrollable_frame
    mainframe = scrollable_frame

    # 1) Yakıt Türü Seçimi
    rocket_type_var = tk.StringVar()
    rocket_type_label = ttk.Label(mainframe, text="Yakıt Türü Seçiniz:")
    rocket_type_label.grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)

    rocket_type_combo = ttk.Combobox(mainframe, textvariable=rocket_type_var,
                                     values=["Sıvı Yakıt", "Katı Yakıt"], state="readonly")
    rocket_type_combo.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
    rocket_type_combo.set("Sıvı Yakıt")  # Varsayılan
    rocket_type_combo.bind("<<ComboboxSelected>>", toggle_frames)

    # ---------------- SIVI YAKIT ALANLARI ----------------
    liquid_frame = ttk.LabelFrame(mainframe, text="Sıvı Yakıt Parametreleri")
    liquid_frame.grid(row=1, column=0, columnspan=2, pady=5, sticky="ew")

    pair_var = tk.StringVar()
    pair_label = ttk.Label(liquid_frame, text="Yakıt / Oksitleyici:")
    pair_label.grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
    pair_menu = ttk.Combobox(liquid_frame, textvariable=pair_var,
                             values=list(liquid_fuel_defaults.keys()), state="readonly")
    pair_menu.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
    pair_var.set(list(liquid_fuel_defaults.keys())[0])  # Varsayılan
    pair_menu.bind("<<ComboboxSelected>>", lambda e: load_liquid_defaults(pair_var.get()))

    ttk.Label(liquid_frame, text="Yanma Odası Basıncı (Pa):").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
    chamber_pressure_entry = ttk.Entry(liquid_frame, width=20)
    chamber_pressure_entry.grid(row=1, column=1, padx=5, pady=5, sticky="ew")
    create_tooltip(chamber_pressure_entry, "Yanma odası basıncı (Pa)")

    ttk.Label(liquid_frame, text="Egzoz Çıkış Basıncı (Pa):").grid(row=2, column=0, sticky=tk.W, padx=5, pady=5)
    exit_pressure_entry = ttk.Entry(liquid_frame, width=20)
    exit_pressure_entry.grid(row=2, column=1, padx=5, pady=5, sticky="ew")
    create_tooltip(exit_pressure_entry, "Egzoz çıkış basıncı (Pa)")

    ttk.Label(liquid_frame, text="Yanma Odası Sıcaklığı (K):").grid(row=3, column=0, sticky=tk.W, padx=5, pady=5)
    chamber_temperature_entry = ttk.Entry(liquid_frame, width=20)
    chamber_temperature_entry.grid(row=3, column=1, padx=5, pady=5, sticky="ew")
    create_tooltip(chamber_temperature_entry, "Yanma odası sıcaklığı (K)")

    ttk.Label(liquid_frame, text="Boğaz Çapı (mm):").grid(row=4, column=0, sticky=tk.W, padx=5, pady=5)
    throat_diameter_entry = ttk.Entry(liquid_frame, width=20)
    throat_diameter_entry.grid(row=4, column=1, padx=5, pady=5, sticky="ew")
    create_tooltip(throat_diameter_entry, "Boğaz çapı (mm)")

    ttk.Label(liquid_frame, text="Egzoz Çıkış Çapı (mm):").grid(row=5, column=0, sticky=tk.W, padx=5, pady=5)
    exit_diameter_entry = ttk.Entry(liquid_frame, width=20)
    exit_diameter_entry.grid(row=5, column=1, padx=5, pady=5, sticky="ew")
    create_tooltip(exit_diameter_entry, "Egzoz çıkış çapı (mm)")

    ttk.Label(liquid_frame, text="Ortam Basıncı (Pa):").grid(row=6, column=0, sticky=tk.W, padx=5, pady=5)
    ambient_pressure_entry = ttk.Entry(liquid_frame, width=20)
    ambient_pressure_entry.grid(row=6, column=1, padx=5, pady=5, sticky="ew")
    create_tooltip(ambient_pressure_entry, "Ortam basıncı (Pa)")

    # ---------------- KATI YAKIT ALANLARI ----------------
    solid_frame = ttk.LabelFrame(mainframe, text="Katı Yakıt Parametreleri")
    solid_frame.grid(row=2, column=0, columnspan=2, pady=5, sticky="ew")
    solid_frame.grid_remove()  # Başlangıçta gizli

    # Basitleştirilmiş katı yakıt parametreleri
    solid_fuel_var = tk.StringVar()
    ttk.Label(solid_frame, text="Yakıt Türü:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
    solid_fuel_combo = ttk.Combobox(solid_frame, textvariable=solid_fuel_var,
                                    values=list(solid_fuels.keys()), state="readonly")
    solid_fuel_combo.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
    solid_fuel_combo.set("HTPB")  # Varsayılan
    solid_fuel_combo.bind("<<ComboboxSelected>>", on_solid_fuel_selected)

    ttk.Label(solid_frame, text="Yakıtın Uzunluğu (m):").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
    length_entry = ttk.Entry(solid_frame, width=20)
    length_entry.grid(row=1, column=1, padx=5, pady=5, sticky="ew")
    create_tooltip(length_entry, "Yakıtın uzunluğu (m)")

    ttk.Label(solid_frame, text="Yakıtın Kalınlığı (m):").grid(row=2, column=0, sticky=tk.W, padx=5, pady=5)
    thickness_entry = ttk.Entry(solid_frame, width=20)
    thickness_entry.grid(row=2, column=1, padx=5, pady=5, sticky="ew")
    create_tooltip(thickness_entry, "Yakıtın kalınlığı (m)")

    ttk.Label(solid_frame, text="Yanma Hızı (m/s):").grid(row=3, column=0, sticky=tk.W, padx=5, pady=5)
    burn_rate_entry = ttk.Entry(solid_frame, width=20)
    burn_rate_entry.grid(row=3, column=1, padx=5, pady=5, sticky="ew")
    create_tooltip(burn_rate_entry, "Yanma hızı (m/s)")

    ttk.Label(solid_frame, text="Karakteristik Hız (c*):").grid(row=4, column=0, sticky=tk.W, padx=5, pady=5)
    cstar_entry = ttk.Entry(solid_frame, width=20)
    cstar_entry.grid(row=4, column=1, padx=5, pady=5, sticky="ew")
    create_tooltip(cstar_entry, "Karakteristik hız (c*)")

    # Özel Yakıt Ekleme Butonu
    ttk.Button(solid_frame, text="Özel Yakıt Ekle", command=add_custom_fuel).grid(row=5, column=0, columnspan=2,
                                                                                  pady=10, sticky="ew")

    # -------------------- Zaman Parametreleri --------------------
    time_frame = ttk.LabelFrame(mainframe, text="Zaman Parametreleri")
    time_frame.grid(row=3, column=0, columnspan=2, pady=5, sticky="ew")

    ttk.Label(time_frame, text="Yanma Süresi (s):").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
    burn_time_entry = ttk.Entry(time_frame, width=20)
    burn_time_entry.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
    burn_time_entry.insert(0, "10")  # Varsayılan yanma süresi
    create_tooltip(burn_time_entry, "Roket motorunun yanma süresi (s)")

    ttk.Label(time_frame, text="Zaman Adımı (s):").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
    time_step_entry = ttk.Entry(time_frame, width=20)
    time_step_entry.grid(row=1, column=1, padx=5, pady=5, sticky="ew")
    time_step_entry.insert(0, "1")  # Varsayılan zaman adımı
    create_tooltip(time_step_entry, "Hesaplamaların yapılacağı zaman adımı (s)")

    # -------------------- Kullanıcı Profili Arayüzü --------------------
    create_profile_management()

    # -------------------- Sonuç Gösterme --------------------
    result_text = tk.StringVar()
    result_label = ttk.Label(right_frame, textvariable=result_text, foreground="blue", justify="left", anchor="nw")
    result_label.pack(fill='both', expand=True, padx=10, pady=10)

    # -------------------- Hesaplama Butonu --------------------
    calculate_button = ttk.Button(mainframe, text="Hesapla", command=calculate)
    calculate_button.grid(row=5, column=0, columnspan=2, pady=10, sticky="ew")

    # -------------------- Sağ Taraf İçin Grafik ve Eğitim Modülü --------------------
    # Grafik butonları için ayrı bir Frame oluşturuyoruz
    graph_buttons_frame = ttk.LabelFrame(right_frame, text="Grafikler")
    graph_buttons_frame.pack(fill='x', padx=5, pady=5)

    # Grafik butonları
    ttk.Button(graph_buttons_frame, text="İtki Kuvveti Grafiği", command=plot_thrust_graph).grid(row=0, column=0,
                                                                                                 padx=5, pady=5,
                                                                                                 sticky="ew")
    ttk.Button(graph_buttons_frame, text="Kütle Akış Hızı Grafiği", command=plot_mass_flow_graph).grid(row=0, column=1,
                                                                                                       padx=5, pady=5,
                                                                                                       sticky="ew")
    ttk.Button(graph_buttons_frame, text="Egzoz Hızı Grafiği", command=plot_exit_velocity_graph).grid(row=0, column=2,
                                                                                                      padx=5, pady=5,
                                                                                                      sticky="ew")

    # Grafik butonlarının eşit sütun genişliği alması için sütun ağırlıklarını ayarlıyoruz
    for i in range(3):
        graph_buttons_frame.columnconfigure(i, weight=1)

    # Eğitim Modülü Butonu
    ttk.Button(right_frame, text="Eğitim Modülünü Aç", command=open_training_module).pack(pady=10, fill='x', padx=5)

    # -------------------- Başlangıçta Varsayılan Parametreleri Yükleme --------------------
    initialize_defaults()

    root.mainloop()


# -------------------- Başlangıç --------------------
if __name__ == "__main__":
    main()
