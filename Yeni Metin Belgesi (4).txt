import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import json
import math
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np


# -------------------- Yardımcı Fonksiyonlar --------------------
def parse_float(value, field_name=""):
    """Girdiği değeri float'a dönüştürür, hata kontrolü yapar."""
    try:
        return float(value)
    except ValueError:
        raise ValueError(f"'{value}' geçerli bir sayı değil{f' ({field_name})' if field_name else ''}.")


def create_tooltip(widget, text):
    """Basit bir tooltip oluşturur."""
    tooltip = tk.Toplevel(widget)
    tooltip.withdraw()
    tooltip.overrideredirect(True)
    tooltip.attributes("-topmost", True)
    label = ttk.Label(tooltip, text=text, background="yellow", relief='solid', borderwidth=1, style="Custom.TLabel")
    label.pack()

    def enter(event):
        x = event.x_root + 20
        y = event.y_root + 10
        tooltip.geometry(f"+{x}+{y}")
        tooltip.deiconify()

    def leave(event):
        tooltip.withdraw()

    widget.bind("<Enter>", enter)
    widget.bind("<Leave>", leave)


# -------------------- Hesaplama Fonksiyonları --------------------
class RocketCalculator:
    """Roket motoru hesaplamalarını gerçekleştiren sınıf."""

    def __init__(self):
        # Sıvı yakıt yakıt/oksitleyici çiftleri ve özellikleri
        self.liquid_fuel_properties = {
            "RP-1 / LOX": {"R": 355, "gamma": 1.21},
            "LH2 / LOX": {"R": 4124, "gamma": 1.4},
            "UDMH / NTO": {"R": 194, "gamma": 1.2},
            "MMH / NTO": {"R": 208, "gamma": 1.3},
            "Hydrazine / NTO": {"R": 287, "gamma": 1.2},
            "Aerozine 50 / NTO": {"R": 208, "gamma": 1.3},
            "Methane / LOX": {"R": 518, "gamma": 1.3},
            "Ethanol / LOX": {"R": 1160, "gamma": 1.2},
            "Kerosene / LOX": {"R": 355, "gamma": 1.21},
            "Hydrogen Peroxide / Kerosene": {"R": 250, "gamma": 1.13}
        }

        # Katı yakıt türleri ve özellikleri
        self.solid_fuel_properties = {
            "HTPB": {"burn_rate": 0.01, "c_star": 1600, "length": 0.5, "thickness": 0.2, "fuel_radius": 0.05},
            "Nitrocellulose": {"burn_rate": 0.005, "c_star": 1500, "length": 0.6, "thickness": 0.035,
                               "fuel_radius": 0.05},
            "Ammonium Perchlorate": {"burn_rate": 0.015, "c_star": 1700, "length": 0.55, "thickness": 0.037,
                                     "fuel_radius": 0.05}
        }

    def calculate_mass_flow_rate_liquid(self, chamber_pressure, throat_area, R, T, gamma):
        """
        Sıvı yakıt için kütle akış hızını hesaplar.
        """
        term1 = math.sqrt(gamma / (R * T))
        term2 = (2 / (gamma + 1)) ** ((gamma + 1) / (2 * (gamma - 1)))
        return throat_area * chamber_pressure * term1 * term2

    def calculate_exit_velocity_liquid(self, chamber_pressure, exit_pressure, T, R, gamma):
        """
        Sıvı yakıt için egzoz hızını hesaplar.
        """
        term1 = (2 * gamma) / (gamma - 1)
        term2 = R * T
        term3 = 1 - (exit_pressure / chamber_pressure) ** ((gamma - 1) / gamma)
        return math.sqrt(term1 * term2 * term3)

    def calculate_thrust_liquid(self, m_dot, exit_velocity, exit_pressure, exit_area, ambient_pressure):
        """
        Sıvı yakıt için itki kuvvetini hesaplar.
        """
        return m_dot * exit_velocity + (exit_pressure - ambient_pressure) * exit_area

    def calculate_solid_thrust(self, length, thickness, burn_rate, c_star, fuel_radius):
        """
        Katı yakıt için itki kuvveti ve kütle akış hızını hesaplar.
        """
        throat_area = math.pi * (fuel_radius) ** 2
        m_dot = burn_rate * thickness * throat_area
        thrust = m_dot * c_star
        return thrust, m_dot


# -------------------- Profil Yönetimi --------------------
class ProfileManager:
    """Kullanıcı profillerini kaydetme ve yükleme işlevselliği."""

    def __init__(self, calculator, gui):
        self.calculator = calculator
        self.gui = gui

    def save_profile(self):
        """
        Kullanıcı profilini JSON dosyası olarak kaydeder.
        """
        profile = {
            "yakıt_türü": self.gui.rocket_type_var.get(),
            "sıvı_yakıt_parametreleri": {
                "yakıt_oksitleyici": self.gui.pair_var.get(),
                "yanma_odası_basıncı": self.gui.chamber_pressure_entry.get(),
                "egzoz_cıkış_basıncı": self.gui.exit_pressure_entry.get(),
                "yanma_odası_sıcaklığı": self.gui.chamber_temperature_entry.get(),
                "boğaz_çapı": self.gui.throat_diameter_entry.get(),
                "egzoz_cıkış_çapı": self.gui.exit_diameter_entry.get(),
                "ortam_basıncı": self.gui.ambient_pressure_entry.get()
            },
            "katı_yakıt_parametreleri": {
                "yakıt_türü": self.gui.solid_fuel_var.get(),
                "yakıt_uzunluğu": self.gui.length_entry.get(),
                "yakıt_kalınlığı": self.gui.thickness_entry.get(),
                "yanma_hızı": self.gui.burn_rate_entry.get(),
                "karakteristik_hız": self.gui.cstar_entry.get()
            },
            "zaman_parametreleri": {
                "burn_time": self.gui.burn_time_entry.get(),
                "time_step": self.gui.time_step_entry.get()
            },
        }

        file_path = filedialog.asksaveasfilename(defaultextension=".json",
                                                 filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
                                                 title="Profili Kaydet")
        if file_path:
            try:
                with open(file_path, 'w') as file:
                    json.dump(profile, file, indent=4)
                messagebox.showinfo("Başarılı", "Profil JSON dosyasına kaydedildi.")
            except Exception as e:
                messagebox.showerror("Hata", f"Profil kaydedilirken bir hata oluştu.\n{e}")

    def load_profile(self):
        """
        Kullanıcı profilini JSON dosyasından yükler.
        """
        file_path = filedialog.askopenfilename(defaultextension=".json",
                                               filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
                                               title="Profil Yükle")
        if file_path:
            try:
                with open(file_path, 'r') as file:
                    profile = json.load(file)

                # Yakıt Türünü Ayarla ve Frame'i Güncelle
                self.gui.rocket_type_var.set(profile.get("yakıt_türü", "Sıvı Yakıt"))
                self.gui.toggle_frames()

                # Sıvı Yakıt Parametrelerini Güncelle
                liquid_params = profile.get("sıvı_yakıt_parametreleri", {})
                self.gui.pair_var.set(
                    liquid_params.get("yakıt_oksitleyici", list(self.calculator.liquid_fuel_properties.keys())[0]))
                self.gui.chamber_pressure_entry.delete(0, tk.END)
                self.gui.chamber_pressure_entry.insert(0, liquid_params.get("yanma_odası_basıncı", "1e6"))
                self.gui.exit_pressure_entry.delete(0, tk.END)
                self.gui.exit_pressure_entry.insert(0, liquid_params.get("egzoz_cıkış_basıncı", "101325"))
                self.gui.chamber_temperature_entry.delete(0, tk.END)
                self.gui.chamber_temperature_entry.insert(0, liquid_params.get("yanma_odası_sıcaklığı", "3500"))
                self.gui.throat_diameter_entry.delete(0, tk.END)
                self.gui.throat_diameter_entry.insert(0, liquid_params.get("boğaz_çapı", "51.6"))
                self.gui.exit_diameter_entry.delete(0, tk.END)
                self.gui.exit_diameter_entry.insert(0, liquid_params.get("egzoz_cıkış_çapı", "103.2"))
                self.gui.ambient_pressure_entry.delete(0, tk.END)
                self.gui.ambient_pressure_entry.insert(0, liquid_params.get("ortam_basıncı", "101325"))

                # Katı Yakıt Parametrelerini Güncelle
                solid_params = profile.get("katı_yakıt_parametreleri", {})
                self.gui.solid_fuel_var.set(solid_params.get("yakıt_türü", "HTPB"))
                self.gui.length_entry.delete(0, tk.END)
                self.gui.length_entry.insert(0, solid_params.get("yakıt_uzunluğu", "0.5"))
                self.gui.thickness_entry.delete(0, tk.END)
                self.gui.thickness_entry.insert(0, solid_params.get("yakıt_kalınlığı", "0.2"))
                self.gui.burn_rate_entry.delete(0, tk.END)
                self.gui.burn_rate_entry.insert(0, solid_params.get("yanma_hızı", "0.01"))
                self.gui.cstar_entry.delete(0, tk.END)
                self.gui.cstar_entry.insert(0, solid_params.get("karakteristik_hız", "1600"))

                # Zaman Parametrelerini Güncelle
                zaman_params = profile.get("zaman_parametreleri", {})
                self.gui.burn_time_entry.delete(0, tk.END)
                self.gui.burn_time_entry.insert(0, zaman_params.get("burn_time", "10"))
                self.gui.time_step_entry.delete(0, tk.END)
                self.gui.time_step_entry.insert(0, zaman_params.get("time_step", "1"))

                messagebox.showinfo("Başarılı", "Profil başarıyla yüklendi.")
            except Exception as e:
                messagebox.showerror("Hata", f"Profil yüklenirken bir hata oluştu.\n{e}")


# -------------------- Optimizasyon Fonksiyonları --------------------
class Optimizer:
    """Parametre optimizasyonu için sınıf."""

    def __init__(self, calculator, gui):
        self.calculator = calculator
        self.gui = gui

    def optimize_parameters(self, target_thrust):
        """
        Hedef itki kuvvetine ulaşmak için parametre optimizasyonu yapar.
        Basit bir örnek olarak, yanma odası basıncını ayarlar.
        """
        try:
            target_thrust = parse_float(target_thrust, "Hedef İtki Kuvveti")
            current_thrust = self.gui.last_calculated_thrust
            if current_thrust == 0:
                raise ValueError("Önce hesaplama yapmalısınız.")

            # Basit oran hesabı ile yeni yanma odası basıncını hesapla
            chamber_pressure = self.gui.last_chamber_pressure
            if chamber_pressure == 0:
                raise ValueError("Yanma odası basıncı sıfır olamaz.")

            new_chamber_pressure = chamber_pressure * (target_thrust / current_thrust)

            # Yanma odası basıncını güncelle
            self.gui.chamber_pressure_entry.delete(0, tk.END)
            self.gui.chamber_pressure_entry.insert(0, f"{new_chamber_pressure:.2f}")

            # Hesaplamayı tekrar yap
            self.gui.calculate()

            messagebox.showinfo("Başarılı", f"Yanma odası basıncı {new_chamber_pressure:.2f} Pa olarak ayarlandı.")
        except ValueError as ve:
            messagebox.showerror("Hata", f"Lütfen geçerli bir hedef itki kuvveti giriniz.\n{ve}")
        except Exception as e:
            messagebox.showerror("Hata", f"Optimizasyon sırasında bir hata oluştu.\n{e}")


# -------------------- Roket Motoru Hesaplama Uygulaması --------------------
class RocketEngineCalculatorApp:
    """Roket motoru hesaplama uygulaması."""

    def __init__(self, root):
        self.root = root
        self.root.title("Roket Motoru Hesaplama (Katı / Sıvı)")
        self.root.geometry("1200x800")  # Daha geniş bir pencere boyutu
        self.root.minsize(1000, 700)

        # Stil nesnesini oluşturun
        self.style = ttk.Style()
        self.style.configure("Custom.TLabelframe", font=('Helvetica', 12, 'bold'))
        self.style.configure("Custom.TLabel", font=('Helvetica', 10))
        self.style.configure("Custom.TButton", font=('Helvetica', 10))
        self.style.configure("Custom.TCombobox", font=('Helvetica', 10))
        self.style.configure("Custom.TEntry", font=('Helvetica', 10))

        # Split the main window into left and right frames
        self.main_paned = ttk.PanedWindow(root, orient=tk.HORIZONTAL)
        self.main_paned.pack(fill=tk.BOTH, expand=True)

        # Left frame for parameters and controls
        self.left_frame = ttk.Frame(self.main_paned, relief=tk.SUNKEN)
        self.main_paned.add(self.left_frame, weight=1)

        # Right frame for calculation results and graphs
        self.right_frame = ttk.Frame(self.main_paned, relief=tk.SUNKEN)
        self.main_paned.add(self.right_frame, weight=1)

        # Create a scrollable canvas inside the left frame
        self.canvas_left = tk.Canvas(self.left_frame, borderwidth=0, background="#f0f0f0")
        self.scrollbar_left = ttk.Scrollbar(self.left_frame, orient="vertical", command=self.canvas_left.yview)
        self.scrollable_frame = ttk.Frame(self.canvas_left, padding="10")

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas_left.configure(
                scrollregion=self.canvas_left.bbox("all")
            )
        )

        self.canvas_left.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas_left.configure(yscrollcommand=self.scrollbar_left.set)

        self.canvas_left.pack(side="left", fill="both", expand=True)
        self.scrollbar_left.pack(side="right", fill="y")

        # Add mouse wheel scrolling
        def _on_mousewheel(event):
            if self.root.tk.call('tk', 'windowingsystem') == 'win32':
                self.canvas_left.yview_scroll(int(-1 * (event.delta / 120)), "units")
            elif self.root.tk.call('tk', 'windowingsystem') == 'x11':
                if event.num == 4:
                    self.canvas_left.yview_scroll(-1, "units")
                elif event.num == 5:
                    self.canvas_left.yview_scroll(1, "units")
            elif self.root.tk.call('tk', 'windowingsystem') == 'aqua':
                self.canvas_left.yview_scroll(int(-1 * (event.delta)), "units")

        self.canvas_left.bind_all("<MouseWheel>", _on_mousewheel)
        self.canvas_left.bind_all("<Button-4>", _on_mousewheel)
        self.canvas_left.bind_all("<Button-5>", _on_mousewheel)

        # Set mainframe to scrollable_frame
        self.mainframe = self.scrollable_frame

        # Initialize Calculator, Profile Manager, and Optimizer
        self.calculator = RocketCalculator()
        self.profile_manager = ProfileManager(self.calculator, self)
        self.optimizer = Optimizer(self.calculator, self)

        # Initialize Variables
        self.rocket_type_var = tk.StringVar()
        self.pair_var = tk.StringVar()
        self.solid_fuel_var = tk.StringVar()

        # Initialize Last Calculated Values
        self.last_calculated_thrust = 0
        self.last_calculated_m_dot = 0
        self.last_calculated_exit_vel = 0
        self.last_burn_rate = 0
        self.last_thickness = 0
        self.last_chamber_pressure = 0  # Sıvı yakıt için

        # Initialize Lists for Graphs
        self.thrust_list = []
        self.m_dot_list = []
        self.exit_vel_list = []
        self.time_points = []

        # -------------------- Yakıt Türü Seçimi --------------------
        self.create_fuel_type_selection()

        # -------------------- Sıvı Yakıt Parametreleri --------------------
        self.create_liquid_fuel_parameters()

        # -------------------- Katı Yakıt Parametreleri --------------------
        self.create_solid_fuel_parameters()

        # -------------------- Zaman Parametreleri --------------------
        self.create_time_parameters()

        # -------------------- Profil Yönetimi --------------------
        self.create_profile_management()

        # -------------------- Hesaplama Butonu --------------------
        self.create_calculate_button()

        # -------------------- Sonuç Gösterme --------------------
        self.create_result_display()

        # -------------------- Grafik ve Eğitim Modülü --------------------
        self.create_graph_and_training_module()

        # -------------------- Varsayılan Ayarları Yükleme --------------------
        self.toggle_frames()

    # -------------------- Yakıt Türü Seçimi --------------------
    def create_fuel_type_selection(self):
        """Yakıt türü seçimini oluşturur."""
        fuel_type_frame = ttk.LabelFrame(self.mainframe, text="Yakıt Türü Seçiniz", style="Custom.TLabelframe")
        fuel_type_frame.grid(row=0, column=0, columnspan=2, pady=10, sticky="ew")

        fuel_type_combo = ttk.Combobox(
            fuel_type_frame,
            textvariable=self.rocket_type_var,
            values=["Sıvı Yakıt", "Katı Yakıt"],
            state="readonly",
            style="Custom.TCombobox"
        )
        fuel_type_combo.grid(row=0, column=0, padx=10, pady=10, sticky="ew")
        fuel_type_combo.set("Sıvı Yakıt")  # Varsayılan
        fuel_type_combo.bind("<<ComboboxSelected>>", self.toggle_frames)

    # -------------------- Sıvı Yakıt Parametreleri --------------------
    def create_liquid_fuel_parameters(self):
        """Sıvı yakıt parametrelerini oluşturur."""
        self.liquid_frame = ttk.LabelFrame(
            self.mainframe,
            text="Sıvı Yakıt Parametreleri",
            style="Custom.TLabelframe"
        )
        self.liquid_frame.grid(row=1, column=0, columnspan=2, pady=10, sticky="ew")

        # Yakıt/Oksitleyici Çifti
        pair_label = ttk.Label(self.liquid_frame, text="Yakıt / Oksitleyici:", style="Custom.TLabel")
        pair_label.grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        pair_menu = ttk.Combobox(
            self.liquid_frame,
            textvariable=self.pair_var,
            values=list(self.calculator.liquid_fuel_properties.keys()),
            state="readonly",
            style="Custom.TCombobox"
        )
        pair_menu.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        self.pair_var.set(list(self.calculator.liquid_fuel_properties.keys())[0])  # Varsayılan
        pair_menu.bind("<<ComboboxSelected>>", self.load_liquid_defaults)

        # Yanma Odası Basıncı
        chamber_pressure_label = ttk.Label(self.liquid_frame, text="Yanma Odası Basıncı (Pa):", style="Custom.TLabel")
        chamber_pressure_label.grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        self.chamber_pressure_entry = ttk.Entry(self.liquid_frame, width=20, style="Custom.TEntry")
        self.chamber_pressure_entry.grid(row=1, column=1, padx=5, pady=5, sticky="ew")
        create_tooltip(self.chamber_pressure_entry, "Yanma odası basıncı (Pa)")

        # Egzoz Çıkış Basıncı
        exit_pressure_label = ttk.Label(self.liquid_frame, text="Egzoz Çıkış Basıncı (Pa):", style="Custom.TLabel")
        exit_pressure_label.grid(row=2, column=0, sticky=tk.W, padx=5, pady=5)
        self.exit_pressure_entry = ttk.Entry(self.liquid_frame, width=20, style="Custom.TEntry")
        self.exit_pressure_entry.grid(row=2, column=1, padx=5, pady=5, sticky="ew")
        create_tooltip(self.exit_pressure_entry, "Egzoz çıkış basıncı (Pa)")

        # Yanma Odası Sıcaklığı
        chamber_temperature_label = ttk.Label(self.liquid_frame, text="Yanma Odası Sıcaklığı (K):",
                                              style="Custom.TLabel")
        chamber_temperature_label.grid(row=3, column=0, sticky=tk.W, padx=5, pady=5)
        self.chamber_temperature_entry = ttk.Entry(self.liquid_frame, width=20, style="Custom.TEntry")
        self.chamber_temperature_entry.grid(row=3, column=1, padx=5, pady=5, sticky="ew")
        create_tooltip(self.chamber_temperature_entry, "Yanma odası sıcaklığı (K)")

        # Boğaz Çapı
        throat_diameter_label = ttk.Label(self.liquid_frame, text="Boğaz Çapı (mm):", style="Custom.TLabel")
        throat_diameter_label.grid(row=4, column=0, sticky=tk.W, padx=5, pady=5)
        self.throat_diameter_entry = ttk.Entry(self.liquid_frame, width=20, style="Custom.TEntry")
        self.throat_diameter_entry.grid(row=4, column=1, padx=5, pady=5, sticky="ew")
        create_tooltip(self.throat_diameter_entry, "Boğaz çapı (mm)")

        # Egzoz Çıkış Çapı
        exit_diameter_label = ttk.Label(self.liquid_frame, text="Egzoz Çıkış Çapı (mm):", style="Custom.TLabel")
        exit_diameter_label.grid(row=5, column=0, sticky=tk.W, padx=5, pady=5)
        self.exit_diameter_entry = ttk.Entry(self.liquid_frame, width=20, style="Custom.TEntry")
        self.exit_diameter_entry.grid(row=5, column=1, padx=5, pady=5, sticky="ew")
        create_tooltip(self.exit_diameter_entry, "Egzoz çıkış çapı (mm)")

        # Ortam Basıncı
        ambient_pressure_label = ttk.Label(self.liquid_frame, text="Ortam Basıncı (Pa):", style="Custom.TLabel")
        ambient_pressure_label.grid(row=6, column=0, sticky=tk.W, padx=5, pady=5)
        self.ambient_pressure_entry = ttk.Entry(self.liquid_frame, width=20, style="Custom.TEntry")
        self.ambient_pressure_entry.grid(row=6, column=1, padx=5, pady=5, sticky="ew")
        create_tooltip(self.ambient_pressure_entry, "Ortam basıncı (Pa)")

    # -------------------- Katı Yakıt Parametreleri --------------------
    def create_solid_fuel_parameters(self):
        """Katı yakıt parametrelerini oluşturur."""
        self.solid_frame = ttk.LabelFrame(
            self.mainframe,
            text="Katı Yakıt Parametreleri",
            style="Custom.TLabelframe"
        )
        self.solid_frame.grid(row=2, column=0, columnspan=2, pady=10, sticky="ew")
        self.solid_frame.grid_remove()  # Başlangıçta gizli

        # Yakıt Türü
        fuel_type_label = ttk.Label(self.solid_frame, text="Yakıt Türü:", style="Custom.TLabel")
        fuel_type_label.grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        fuel_type_combo = ttk.Combobox(
            self.solid_frame,
            textvariable=self.solid_fuel_var,
            values=list(self.calculator.solid_fuel_properties.keys()),
            state="readonly",
            style="Custom.TCombobox"
        )
        fuel_type_combo.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        fuel_type_combo.set("HTPB")  # Varsayılan
        fuel_type_combo.bind("<<ComboboxSelected>>", self.on_solid_fuel_selected)

        # Yakıt Uzunluğu
        length_label = ttk.Label(self.solid_frame, text="Yakıtın Uzunluğu (m):", style="Custom.TLabel")
        length_label.grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        self.length_entry = ttk.Entry(self.solid_frame, width=20, style="Custom.TEntry")
        self.length_entry.grid(row=1, column=1, padx=5, pady=5, sticky="ew")
        create_tooltip(self.length_entry, "Yakıtın uzunluğu (m)")

        # Yakıt Kalınlığı
        thickness_label = ttk.Label(self.solid_frame, text="Yakıtın Kalınlığı (m):", style="Custom.TLabel")
        thickness_label.grid(row=2, column=0, sticky=tk.W, padx=5, pady=5)
        self.thickness_entry = ttk.Entry(self.solid_frame, width=20, style="Custom.TEntry")
        self.thickness_entry.grid(row=2, column=1, padx=5, pady=5, sticky="ew")
        create_tooltip(self.thickness_entry, "Yakıtın kalınlığı (m)")

        # Yanma Hızı
        burn_rate_label = ttk.Label(self.solid_frame, text="Yanma Hızı (m/s):", style="Custom.TLabel")
        burn_rate_label.grid(row=3, column=0, sticky=tk.W, padx=5, pady=5)
        self.burn_rate_entry = ttk.Entry(self.solid_frame, width=20, style="Custom.TEntry")
        self.burn_rate_entry.grid(row=3, column=1, padx=5, pady=5, sticky="ew")
        create_tooltip(self.burn_rate_entry, "Yanma hızı (m/s)")

        # Karakteristik Hız
        cstar_label = ttk.Label(self.solid_frame, text="Karakteristik Hız (c*):", style="Custom.TLabel")
        cstar_label.grid(row=4, column=0, sticky=tk.W, padx=5, pady=5)
        self.cstar_entry = ttk.Entry(self.solid_frame, width=20, style="Custom.TEntry")
        self.cstar_entry.grid(row=4, column=1, padx=5, pady=5, sticky="ew")
        create_tooltip(self.cstar_entry, "Karakteristik hız (c*)")

        # Özel Yakıt Ekleme Butonu
        add_fuel_button = ttk.Button(
            self.solid_frame,
            text="Özel Yakıt Ekle",
            command=self.add_custom_fuel,
            style="Custom.TButton"
        )
        add_fuel_button.grid(row=5, column=0, columnspan=2, pady=10, sticky="ew")

    # -------------------- Zaman Parametreleri --------------------
    def create_time_parameters(self):
        """Zaman parametrelerini oluşturur."""
        self.time_frame = ttk.LabelFrame(
            self.mainframe,
            text="Zaman Parametreleri",
            style="Custom.TLabelframe"
        )
        self.time_frame.grid(row=3, column=0, columnspan=2, pady=10, sticky="ew")

        # Yanma Süresi
        burn_time_label = ttk.Label(self.time_frame, text="Yanma Süresi (s):", style="Custom.TLabel")
        burn_time_label.grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.burn_time_entry = ttk.Entry(self.time_frame, width=20, style="Custom.TEntry")
        self.burn_time_entry.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        self.burn_time_entry.insert(0, "10")  # Varsayılan yanma süresi
        create_tooltip(self.burn_time_entry, "Roket motorunun yanma süresi (s)")

        # Zaman Adımı
        time_step_label = ttk.Label(self.time_frame, text="Zaman Adımı (s):", style="Custom.TLabel")
        time_step_label.grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        self.time_step_entry = ttk.Entry(self.time_frame, width=20, style="Custom.TEntry")
        self.time_step_entry.grid(row=1, column=1, padx=5, pady=5, sticky="ew")
        self.time_step_entry.insert(0, "1")  # Varsayılan zaman adımı
        create_tooltip(self.time_step_entry, "Hesaplamaların yapılacağı zaman adımı (s)")

    # -------------------- Profil Yönetimi --------------------
    def create_profile_management(self):
        """Kullanıcı profillerini kaydetme ve yükleme arayüzünü oluşturur."""
        profile_frame = ttk.LabelFrame(
            self.mainframe,
            text="Kullanıcı Profilleri",
            style="Custom.TLabelframe"
        )
        profile_frame.grid(row=4, column=0, columnspan=2, pady=10, sticky="ew")

        save_profile_button = ttk.Button(
            profile_frame,
            text="Profili Kaydet",
            command=self.profile_manager.save_profile,
            style="Custom.TButton"
        )
        save_profile_button.grid(row=0, column=0, padx=10, pady=10, sticky="ew")

        load_profile_button = ttk.Button(
            profile_frame,
            text="Profili Yükle",
            command=self.profile_manager.load_profile,
            style="Custom.TButton"
        )
        load_profile_button.grid(row=0, column=1, padx=10, pady=10, sticky="ew")

        optimize_button = ttk.Button(
            profile_frame,
            text="Parametre Optimizasyonu",
            command=self.open_optimization_window,
            style="Custom.TButton"
        )
        optimize_button.grid(row=1, column=0, columnspan=2, padx=10, pady=10, sticky="ew")

    # -------------------- Hesaplama Butonu --------------------
    def create_calculate_button(self):
        """Hesaplama butonunu oluşturur."""
        calculate_button = ttk.Button(
            self.mainframe,
            text="Hesapla",
            command=self.calculate,
            style="Custom.TButton"
        )
        calculate_button.grid(row=5, column=0, columnspan=2, pady=20, sticky="ew")

    # -------------------- Sonuç Gösterme --------------------
    def create_result_display(self):
        """Hesaplama sonuçlarını gösteren alanı oluşturur."""
        result_label = ttk.Label(self.right_frame, text="Hesaplama Sonuçları", style="Custom.TLabel")
        result_label.pack(pady=10)

        self.result_text = tk.StringVar()
        self.result_display = tk.Text(self.right_frame, wrap="word", height=25, font=('Helvetica', 10))
        self.result_display.pack(fill='both', expand=True, padx=10, pady=10)
        self.result_display.config(state=tk.DISABLED)

    # -------------------- Grafik ve Eğitim Modülü --------------------
    def create_graph_and_training_module(self):
        """Grafik çizimleri ve eğitim modülü butonlarını oluşturur."""
        # Grafik butonları için ayrı bir Frame oluşturuyoruz
        graph_buttons_frame = ttk.LabelFrame(
            self.right_frame,
            text="Grafikler",
            style="Custom.TLabelframe"
        )
        graph_buttons_frame.pack(fill='x', padx=10, pady=10)

        # İtki Kuvveti Grafiği
        thrust_graph_button = ttk.Button(
            graph_buttons_frame,
            text="İtki Kuvveti Grafiği",
            command=self.plot_thrust_graph,
            style="Custom.TButton"
        )
        thrust_graph_button.grid(row=0, column=0, padx=5, pady=5, sticky="ew")

        # Kütle Akış Hızı Grafiği
        m_dot_graph_button = ttk.Button(
            graph_buttons_frame,
            text="Kütle Akış Hızı Grafiği",
            command=self.plot_mass_flow_graph,
            style="Custom.TButton"
        )
        m_dot_graph_button.grid(row=0, column=1, padx=5, pady=5, sticky="ew")

        # Egzoz Hızı Grafiği
        exit_vel_graph_button = ttk.Button(
            graph_buttons_frame,
            text="Egzoz Hızı Grafiği",
            command=self.plot_exit_velocity_graph,
            style="Custom.TButton"
        )
        exit_vel_graph_button.grid(row=0, column=2, padx=5, pady=5, sticky="ew")

        # Sütun Ağırlıklarını Ayarlamak için
        for i in range(3):
            graph_buttons_frame.columnconfigure(i, weight=1)

        # Eğitim Modülü Butonu
        training_module_button = ttk.Button(
            self.right_frame,
            text="Eğitim Modülünü Aç",
            command=self.open_training_module,
            style="Custom.TButton"
        )
        training_module_button.pack(pady=10, fill='x', padx=10)

    # -------------------- Yakıt Parametreleri Yükleme --------------------
    def load_liquid_defaults(self, event=None):
        """Seçilen sıvı yakıt için varsayılan parametreleri yükler."""
        fuel_pair = self.pair_var.get()
        defaults = self.calculator.liquid_fuel_properties.get(fuel_pair, {})
        if not defaults:
            return

        # Varsayılan değerler sektöre göre ayarlanabilir
        default_values = {
            "RP-1 / LOX": {"yanma_odası_basıncı": "1e6", "egzoz_cıkış_basıncı": "101325",
                           "yanma_odası_sıcaklığı": "3500", "boğaz_çapı": "51.6",
                           "egzoz_cıkış_çapı": "103.2", "ortam_basıncı": "101325"},
            "LH2 / LOX": {"yanma_odası_basıncı": "2e6", "egzoz_cıkış_basıncı": "101325",
                          "yanma_odası_sıcaklığı": "4000", "boğaz_çapı": "30",
                          "egzoz_cıkış_çapı": "60", "ortam_basıncı": "101325"},
            # Diğer yakıtlar için benzer şekilde ekleyebilirsiniz
        }

        values = default_values.get(fuel_pair, {})
        self.chamber_pressure_entry.delete(0, tk.END)
        self.chamber_pressure_entry.insert(0, values.get("yanma_odası_basıncı", "1e6"))
        self.exit_pressure_entry.delete(0, tk.END)
        self.exit_pressure_entry.insert(0, values.get("egzoz_cıkış_basıncı", "101325"))
        self.chamber_temperature_entry.delete(0, tk.END)
        self.chamber_temperature_entry.insert(0, values.get("yanma_odası_sıcaklığı", "3500"))
        self.throat_diameter_entry.delete(0, tk.END)
        self.throat_diameter_entry.insert(0, values.get("boğaz_çapı", "51.6"))
        self.exit_diameter_entry.delete(0, tk.END)
        self.exit_diameter_entry.insert(0, values.get("egzoz_cıkış_çapı", "103.2"))
        self.ambient_pressure_entry.delete(0, tk.END)
        self.ambient_pressure_entry.insert(0, values.get("ortam_basıncı", "101325"))

    def load_solid_defaults(self, fuel_type):
        """Seçilen katı yakıt için varsayılan parametreleri yükler."""
        properties = self.calculator.solid_fuel_properties.get(fuel_type, {})
        if not properties:
            return

        self.length_entry.delete(0, tk.END)
        self.length_entry.insert(0, str(properties.get("length", "0.5")))
        self.thickness_entry.delete(0, tk.END)
        self.thickness_entry.insert(0, str(properties.get("thickness", "0.2")))
        self.burn_rate_entry.delete(0, tk.END)
        self.burn_rate_entry.insert(0, str(properties.get("burn_rate", "0.01")))
        self.cstar_entry.delete(0, tk.END)
        self.cstar_entry.insert(0, str(properties.get("c_star", "1600")))

    # -------------------- Katı Yakıt Seçimi --------------------
    def on_solid_fuel_selected(self, event=None):
        """Katı yakıt türü seçildiğinde ilgili parametreleri otomatik doldurur."""
        selected_fuel = self.solid_fuel_var.get()
        properties = self.calculator.solid_fuel_properties.get(selected_fuel, {})
        if not properties:
            return

        self.burn_rate_entry.delete(0, tk.END)
        self.burn_rate_entry.insert(0, str(properties.get("burn_rate", "0.01")))
        self.cstar_entry.delete(0, tk.END)
        self.cstar_entry.insert(0, str(properties.get("c_star", "1600")))
        self.load_solid_defaults(selected_fuel)

    # -------------------- Hesaplama Fonksiyonları --------------------
    def calculate(self):
        """Kullanıcı tarafından girilen parametrelere göre hesaplamaları yapar ve sonuçları günceller."""
        self.thrust_list = []
        self.m_dot_list = []
        self.exit_vel_list = []
        self.time_points = []

        chosen_type = self.rocket_type_var.get()

        # Girdi Doğrulama
        try:
            burn_time = parse_float(self.burn_time_entry.get(), "Yanma Süresi")
            if burn_time <= 0:
                raise ValueError("Yanma süresi pozitif bir sayı olmalıdır.")
        except ValueError as ve:
            messagebox.showerror("Hata", f"Lütfen geçerli bir yanma süresi giriniz.\n{ve}")
            return

        try:
            time_step = parse_float(self.time_step_entry.get(), "Zaman Adımı")
            if time_step <= 0:
                raise ValueError("Zaman adımı pozitif bir sayı olmalıdır.")
        except ValueError as ve:
            messagebox.showerror("Hata", f"Lütfen geçerli bir zaman adımı giriniz.\n{ve}")
            return

        # Zaman Dizisi Oluştur
        self.time_points = np.arange(0, burn_time + time_step, time_step)

        if chosen_type == "Sıvı Yakıt":
            self.calculate_liquid_fuel(burn_time, time_step)
        elif chosen_type == "Katı Yakıt":
            self.calculate_solid_fuel(burn_time, time_step)
        else:
            messagebox.showwarning("Uyarı", "Lütfen bir yakıt türü seçin.")

    def calculate_liquid_fuel(self, burn_time, time_step):
        """Sıvı yakıt hesaplamalarını gerçekleştirir."""
        try:
            fuel_pair = self.pair_var.get()
            chamber_pressure = parse_float(self.chamber_pressure_entry.get(), "Yanma Odası Basıncı")
            exit_pressure = parse_float(self.exit_pressure_entry.get(), "Egzoz Çıkış Basıncı")
            chamber_temperature = parse_float(self.chamber_temperature_entry.get(), "Yanma Odası Sıcaklığı")
            throat_diameter = parse_float(self.throat_diameter_entry.get(), "Boğaz Çapı") / 1000  # mm to m
            exit_diameter = parse_float(self.exit_diameter_entry.get(), "Egzoz Çıkış Çapı") / 1000  # mm to m
            ambient_pressure = parse_float(self.ambient_pressure_entry.get(), "Ortam Basıncı")

            # Yakıt Özelliklerini Al
            properties = self.calculator.liquid_fuel_properties.get(fuel_pair, {})
            if not properties:
                raise ValueError("Geçersiz yakıt/oksitleyici çifti.")

            R = properties["R"]
            gamma = properties["gamma"]

            # Boğaz ve egzoz alanları
            throat_area = math.pi * (throat_diameter / 2) ** 2
            exit_area = math.pi * (exit_diameter / 2) ** 2

            for t in self.time_points:
                # Parametrelerin zamanla değişmediğini varsayıyoruz.
                m_dot = self.calculator.calculate_mass_flow_rate_liquid(chamber_pressure, throat_area, R,
                                                                        chamber_temperature, gamma)
                exit_vel = self.calculator.calculate_exit_velocity_liquid(chamber_pressure, exit_pressure,
                                                                          chamber_temperature, R, gamma)
                thrust = self.calculator.calculate_thrust_liquid(m_dot, exit_vel, exit_pressure, exit_area,
                                                                 ambient_pressure)

                self.thrust_list.append(thrust)
                self.m_dot_list.append(m_dot)
                self.exit_vel_list.append(exit_vel)

            # Toplam İtki Hesaplama
            total_impulse = sum([f * time_step for f in self.thrust_list])

            # Toplam Yakıt Tüketimi Hesaplama
            total_mass_consumed = sum([m * time_step for m in self.m_dot_list])

            # Sonuçları Göster
            result = (
                f"Seçilen Yakıt: {fuel_pair}\n"
                f"Toplam Yanma Süresi: {burn_time} s\n"
                f"Kütle Akış Hızı (Ortalama): {np.mean(self.m_dot_list):.2f} kg/s\n"
                f"Egzoz Hızı (Ortalama): {np.mean(self.exit_vel_list):.2f} m/s\n"
                f"İtki Kuvveti (Ortalama): {np.mean(self.thrust_list):.2f} N\n"
                f"Toplam İtki: {total_impulse:.2f} Ns\n"
                f"Toplam Yakıt Tüketimi: {total_mass_consumed:.2f} kg\n"
                f"Yanma Odası Basıncı: {chamber_pressure:.2f} Pa\n"
                f"Egzoz Çıkış Basıncı: {exit_pressure:.2f} Pa\n"
                f"Ortam Basıncı: {ambient_pressure:.2f} Pa\n"
                f"Boğaz Çapı: {throat_diameter:.2f} m\n"
                f"Egzoz Çıkış Çapı: {exit_diameter:.2f} m\n"
                f"Yanma Odası Sıcaklığı: {chamber_temperature:.2f} K"
            )
            self.display_result(result)

            # Global Değişkenleri Güncelle
            self.last_calculated_thrust = np.mean(self.thrust_list)
            self.last_calculated_m_dot = np.mean(self.m_dot_list)
            self.last_calculated_exit_vel = np.mean(self.exit_vel_list)
            self.last_burn_rate = 0  # Sıvı yakıt için
            self.last_thickness = 0  # Sıvı yakıt için
            self.last_chamber_pressure = chamber_pressure
        except ValueError as ve:
            messagebox.showerror("Hata", f"Lütfen geçerli bir hedef itki kuvveti giriniz.\n{ve}")

        def calculate_solid_fuel(self, burn_time, time_step):
            """Katı yakıt hesaplamalarını gerçekleştirir."""
            try:
                selected_fuel = self.solid_fuel_var.get()
                properties = self.calculator.solid_fuel_properties.get(selected_fuel, {})
                if not properties:
                    raise ValueError("Geçersiz yakıt türü seçildi.")

                length = parse_float(self.length_entry.get(), "Yakıt Uzunluğu")  # m
                thickness = parse_float(self.thickness_entry.get(), "Yakıt Kalınlığı")  # m
                burn_rate = parse_float(self.burn_rate_entry.get(), "Yanma Hızı")  # m/s
                cstar_val = parse_float(self.cstar_entry.get(), "Karakteristik Hız")  # m/s
                fuel_radius = properties.get("fuel_radius", 0.05)  # m

                # Yanma hızı ve karakteristik hızın mantıklı olup olmadığını kontrol et
                if not (0.005 <= burn_rate <= 0.02):
                    messagebox.showwarning("Uyarı", "Yanma hızı (burn rate) genellikle 0.005 - 0.02 m/s aralığındadır.")
                if not (1400 <= cstar_val <= 2000):
                    messagebox.showwarning("Uyarı", "Karakteristik hız (c*) genellikle 1400 - 2000 m/s aralığındadır.")

                for t in self.time_points:
                    # Parametrelerin zamanla değişmediğini varsayıyoruz.
                    thrust, m_dot = self.calculator.calculate_solid_thrust(length, thickness, burn_rate, cstar_val,
                                                                           fuel_radius)
                    self.thrust_list.append(thrust)
                    self.m_dot_list.append(m_dot)
                    self.exit_vel_list.append(cstar_val)  # Katı yakıtta c* kullanıyoruz

                # Toplam İtki Hesaplama
                total_impulse = sum([f * time_step for f in self.thrust_list])

                # Toplam Yakıt Tüketimi Hesaplama
                total_mass_consumed = sum([m * time_step for m in self.m_dot_list])

                # Sonuçları Göster
                result = (
                    f"Katı Yakıt Seçildi: {selected_fuel}\n"
                    f"Toplam Yanma Süresi: {burn_time} s\n"
                    f"İtki Kuvveti (Ortalama): {np.mean(self.thrust_list):.2f} N\n"
                    f"Kütle Akış Hızı (Ortalama): {np.mean(self.m_dot_list):.2f} kg/s\n"
                    f"Karakteristik Hız (c*): {cstar_val:.2f} m/s\n"
                    f"Toplam İtki: {total_impulse:.2f} Ns\n"
                    f"Toplam Yakıt Tüketimi: {total_mass_consumed:.2f} kg\n"
                    f"Yakıt Uzunluğu: {length:.2f} m\n"
                    f"Yakıt Kalınlığı: {thickness:.2f} m"
                )
                self.display_result(result)

                # Global Değişkenleri Güncelle
                self.last_calculated_thrust = np.mean(self.thrust_list)
                self.last_calculated_m_dot = np.mean(self.m_dot_list)
                self.last_calculated_exit_vel = cstar_val
                self.last_burn_rate = burn_rate
                self.last_thickness = thickness
                self.last_chamber_pressure = 0  # Katı yakıt için

            except ValueError as ve:
                messagebox.showerror("Hata", f"Lütfen girişlerinizi kontrol edin.\n{ve}")
            except Exception as e:
                messagebox.showerror("Hata", f"Bir hata oluştu:\n{e}")

    # -------------------- Sonuçları Gösterme --------------------
    def display_result(self, result):
        """Hesaplama sonuçlarını ekranda gösterir."""
        self.result_display.config(state=tk.NORMAL)
        self.result_display.delete(1.0, tk.END)
        self.result_display.insert(tk.END, result)
        self.result_display.config(state=tk.DISABLED)

    # -------------------- Grafik Fonksiyonları --------------------
    def plot_thrust_graph(self):
        """İtki Kuvveti Grafiğini çizer ve yeni bir pencere açar."""
        if not self.thrust_list:
            messagebox.showerror("Hata", "Lütfen önce hesaplama yapınız.")
            return

        graph_window = tk.Toplevel(self.root)
        graph_window.title("İtki Kuvveti Grafiği")
        graph_window.geometry("800x600")

        fig, ax = plt.subplots(figsize=(8, 6))
        ax.plot(self.time_points, self.thrust_list, color='tab:blue', label='İtki Kuvveti')
        ax.set_xlabel('Zaman (s)', fontsize=12)
        ax.set_ylabel('İtki Kuvveti (N)', fontsize=12)
        ax.set_title('İtki Kuvveti Zaman Serisi', fontsize=14)
        ax.grid(True)
        ax.legend()

        canvas = FigureCanvasTkAgg(fig, master=graph_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill='both', expand=True)

    def plot_mass_flow_graph(self):
        """Kütle Akış Hızı Grafiğini çizer ve yeni bir pencere açar."""
        if not self.m_dot_list:
            messagebox.showerror("Hata", "Lütfen önce hesaplama yapınız.")
            return

        graph_window = tk.Toplevel(self.root)
        graph_window.title("Kütle Akış Hızı Grafiği")
        graph_window.geometry("800x600")

        fig, ax = plt.subplots(figsize=(8, 6))
        ax.plot(self.time_points, self.m_dot_list, color='tab:green', label='Kütle Akış Hızı')
        ax.set_xlabel('Zaman (s)', fontsize=12)
        ax.set_ylabel('Kütle Akış Hızı (kg/s)', fontsize=12)
        ax.set_title('Kütle Akış Hızı Zaman Serisi', fontsize=14)
        ax.grid(True)
        ax.legend()

        canvas = FigureCanvasTkAgg(fig, master=graph_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill='both', expand=True)

    def plot_exit_velocity_graph(self):
        """Egzoz Hızı Grafiğini çizer ve yeni bir pencere açar."""
        if not self.exit_vel_list:
            messagebox.showerror("Hata", "Lütfen önce hesaplama yapınız.")
            return

        graph_window = tk.Toplevel(self.root)
        graph_window.title("Egzoz Hızı Grafiği")
        graph_window.geometry("800x600")

        fig, ax = plt.subplots(figsize=(8, 6))
        ax.plot(self.time_points, self.exit_vel_list, color='tab:red', label='Egzoz Hızı')
        ax.set_xlabel('Zaman (s)', fontsize=12)
        ax.set_ylabel('Egzoz Hızı (m/s)', fontsize=12)
        ax.set_title('Egzoz Hızı Zaman Serisi', fontsize=14)
        ax.grid(True)
        ax.legend()

        canvas = FigureCanvasTkAgg(fig, master=graph_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill='both', expand=True)

    # -------------------- Eğitim Modülü --------------------
    def open_training_module(self):
        """Kullanıcıya eğitim modülünü gösterir. 5 sayfadan oluşur."""
        training_window = tk.Toplevel(self.root)
        training_window.title("Eğitim Modülü")
        training_window.geometry("800x600")

        # Eğitim modülü için sayfa yönetimi
        class TrainingModule:
            def __init__(self, master):
                self.master = master
                self.current_page = 0
                self.pages = []
                self.create_pages()

                # Navigation Buttons
                nav_frame = ttk.Frame(master)
                nav_frame.pack(pady=10)

                self.prev_button = ttk.Button(nav_frame, text="Önceki", command=self.prev_page, style="Custom.TButton")
                self.prev_button.grid(row=0, column=0, padx=5)
                self.next_button = ttk.Button(nav_frame, text="Sonraki", command=self.next_page, style="Custom.TButton")
                self.next_button.grid(row=0, column=1, padx=5)

                self.display_page(self.current_page)

            def create_pages(self):
                """Eğitim modülü sayfalarını oluşturur."""
                contents = [
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 1**

### **1. Roket Motorunun Temel Bileşenleri**
- **Yanma Odası:** Yakıt ve oksitleyicinin karışıp yandığı bölge.
- **Boğaz:** Yanma odasından egzoza doğru daralan nozul bölgesi.
- **Nozzle (Egzoz):** Gazların hızla dışarı atıldığı genişleyen nozul bölgesi.
- **Yakıt ve Oksitleyici Depoları:** Yakıt ve oksitleyicilerin saklandığı depolar.

### **Kaynaklar ve Daha Fazlası**
- [NASA Rocket Propulsion](https://www.nasa.gov/mission_pages/launch/rockets.html)
- [Wikipedia - Roket Motoru](https://tr.wikipedia.org/wiki/Roket_motoru)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 2**

### **2. Roket Motoru Tasarım Prensipleri**
- **Kütle Akış Hızı (ṁ):** Yanma odasından geçerek egzoza çıkan yakıtın kütle miktarı.
- **Egzoz Hızı (v_e):** Yakıtın yanması sonucu oluşan gazların hızıdır.
- **İtki Kuvveti (F):** Roket motorunun ürettiği kuvvet. 
  \[ F = (\dot{m} \cdot v_e) + (P_e - P_a) \cdot A_e \]

### **Termodinamik İlkeler**
- **Isotermik ve Adyabatik Prosesler:** Yanma sürecinde ısı transferi ve basınç değişimleri.
- **Spesifik Gaz Sabiti (R):** Gazın özelliğine bağlı sabit.
- **Isı Kapasitesi Oranları (γ):** Gazın termodinamik davranışını belirler.

### **Kaynaklar ve Daha Fazlası**
- [Roket Bilimi ve Teknolojisi](https://www.sciencedirect.com/topics/engineering/rocket-propulsion)
- [Wikipedia - Termodinamik](https://tr.wikipedia.org/wiki/Termodinamik)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 3**

### **3. Termodinamik Hesaplamalar**
- **Egzoz Hızı Hesaplaması:**
  \[ v_e = \sqrt{\frac{2 \gamma}{\gamma - 1} R T_c \left(1 - \left(\frac{P_e}{P_c}\right)^{\frac{\gamma - 1}{\gamma}}\right)} \]
- **Kütle Akış Hızı Hesaplaması:**
  \[ \dot{m} = \rho \cdot A_t \cdot \sqrt{\gamma \cdot R \cdot T_t} \]
- **İtki Kuvveti Hesaplaması:**
  \[ F = (\dot{m} \cdot v_e) + (P_e - P_a) \cdot A_e \ ]

### **Gaz Dinamikleri**
- **Choked Flow (Daralma Akışı):** Boğaz alanında maksimum kütle akış hızı.
- **Mach Sayısı:** Hızın ses hızına oranı.
- **Reynolds Sayısı:** Akışın laminer veya türbülanslı olup olmadığını belirler.

### **Kaynaklar ve Daha Fazlası**
- [Thermodynamics in Rocket Engines](https://www.grc.nasa.gov/www/k-12/airplane/mach.html)
- [Wikipedia - Termodinamik](https://tr.wikipedia.org/wiki/Termodinamik)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 4**

### **4. Nozzle Tasarımı ve Egzoz Hızı**
- **Nozzle Tipleri:**
  - **De Laval Nozzle:** Dar boğaz ve geniş egzoz bölgesi ile yüksek egzoz hızları sağlar.
  - **Conical Nozzle:** Basit yapılı, düşük performanslı nozul.
  - **Bell Nozzle:** Yüksek verimlilik ve düşük ses emisyonları için optimize edilmiş nozul.
- **Egzoz Hızı Optimizasyonu:**
  - Nozzle genişleme oranının (exit diameter / throat diameter) doğru ayarlanması.
  - Ortam basıncı ile egzoz çıkış basıncının dengelenmesi.

### **Pratik Örnekler ve Hesaplamalar**
- **Örnek Hesaplama:** RP-1 / LOX çiftli bir roket motoru için itki kuvveti hesaplaması.
- **Grafiklerin Analizi:** İtki kuvveti, kütle akış hızı ve egzoz hızı zamanla nasıl değişir.

### **Kaynaklar ve Daha Fazlası**
- [Rocket Nozzle Design](https://www.grc.nasa.gov/www/k-12/airplane/nozzle.html)
- [Wikipedia - Rocket Nozzle](https://tr.wikipedia.org/wiki/Roket_nozulu)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 5**

### **5. Performans Optimizasyonu ve Kaynaklar**
- **Performans Optimizasyonu:**
  - Hedef itki kuvvetine ulaşmak için parametrelerin ayarlanması.
  - Yanma hızı, yakıt kalınlığı ve yanma odası basıncının optimizasyonu.
- **Optimizasyon Yöntemleri:**
  - Matematiksel yöntemler (Örneğin, Newton-Raphson Yöntemi).
  - Simülasyon ve modelleme teknikleri.
- **Güvenlik ve Testler:**
  - Roket motoru testlerinin güvenli bir şekilde gerçekleştirilmesi.
  - Malzeme seçimi ve dayanıklılık analizleri.

### **Ek Kaynaklar ve Okumalar**
- [Rocket Propulsion Elements by George P. Sutton](https://www.amazon.com/Rocket-Propulsion-Elements-George-Sutton/dp/0071388449)
- [NASA Glenn Research Center - Rocket Propulsion](https://www.grc.nasa.gov/www/k-12/airplane/rocket.html)
- [Wikipedia - Rocket Design](https://tr.wikipedia.org/wiki/Roket_tasarımı)
- [AIAA (American Institute of Aeronautics and Astronautics)](https://www.aiaa.org/)
- [SpaceX Research and Development](https://www.spacex.com/research)

### **Sonuç**
Roket motoru tasarımı ve hesaplamaları, kapsamlı bir bilgi birikimi ve dikkatli planlama gerektirir. Bu eğitim modülü ile temel prensipleri anlamış ve pratik uygulamalar için gerekli araçlara sahip olabilirsiniz.
"""
                ]

                for content in contents:
                    frame = tk.Frame(self.master, background="#f0f0f0")
                    text_widget = tk.Text(
                        frame,
                        wrap="word",
                        padx=10,
                        pady=10,
                        background="#f0f0f0",
                        font=('Helvetica', 10)
                    )
                    text_widget.insert(tk.END, content)
                    text_widget.config(state=tk.DISABLED)
                    text_widget.pack(expand=True, fill='both')
                    self.pages.append(frame)

            def display_page(self, page_number):
                """Belirli bir sayfayı gösterir."""
                for i, page in enumerate(self.pages):
                    if i == page_number:
                        page.pack(fill='both', expand=True, padx=10, pady=10)
                    else:
                        page.pack_forget()

                # Navigation Buttons'ın durumunu ayarla
                if self.current_page == 0:
                    self.prev_button.config(state='disabled')
                else:
                    self.prev_button.config(state='normal')

                if self.current_page == len(self.pages) - 1:
                    self.next_button.config(text="Kapat", command=self.close_window)
                else:
                    self.next_button.config(text="Sonraki", command=self.next_page)

            def next_page(self):
                """Sonraki sayfaya geçiş yapar veya pencereyi kapatır."""
                if self.current_page < len(self.pages) - 1:
                    self.current_page += 1
                    self.display_page(self.current_page)
                else:
                    self.close_window()

            def prev_page(self):
                """Önceki sayfaya geçiş yapar."""
                if self.current_page > 0:
                    self.current_page -= 1
                    self.display_page(self.current_page)

            def close_window(self):
                """Eğitim modülü penceresini kapatır."""
                self.master.destroy()

        TrainingModule(training_window)

    # -------------------- Özel Yakıt Ekleme --------------------
    def add_custom_fuel(self):
        """Kullanıcının özel yakıt türleri eklemesine izin verir."""

        def save_custom_fuel():
            name = custom_name_entry.get().strip()
            try:
                burn_rate = parse_float(custom_burn_rate_entry.get(), "Yanma Hızı")
                cstar = parse_float(custom_cstar_entry.get(), "Karakteristik Hız")
                length = parse_float(custom_length_entry.get(), "Yakıt Uzunluğu")
                thickness = parse_float(custom_thickness_entry.get(), "Yakıt Kalınlığı")
                fuel_radius = parse_float(custom_fuel_radius_entry.get(), "Yakıt Yarıçapı")

                if not name:
                    raise ValueError("Yakıt adı boş olamaz.")
                if name in self.calculator.solid_fuel_properties:
                    raise ValueError("Bu yakıt türü zaten mevcut.")

                self.calculator.solid_fuel_properties[name] = {
                    "burn_rate": burn_rate,
                    "c_star": cstar,
                    "length": length,
                    "thickness": thickness,
                    "fuel_radius": fuel_radius
                }

                messagebox.showinfo("Başarılı", f"{name} yakıtı başarıyla eklendi.")
                custom_window.destroy()
                # Yeni yakıtı Combobox'a ekleyelim
                self.solid_fuel_var.set(name)
                self.load_solid_defaults(name)
            except ValueError as ve:
                messagebox.showerror("Hata", f"Yakıt eklenemedi.\n{ve}")

        # Varsayılan değerler
        custom_window = tk.Toplevel(self.root)
        custom_window.title("Özel Yakıt Ekle")
        custom_window.geometry("400x350")

        ttk.Label(custom_window, text="Yakıt Adı:", style="Custom.TLabel").grid(row=0, column=0, sticky=tk.W, padx=10,
                                                                                pady=10)
        custom_name_entry = ttk.Entry(custom_window, width=25, style="Custom.TEntry")
        custom_name_entry.grid(row=0, column=1, padx=10, pady=10)

        ttk.Label(custom_window, text="Yanma Hızı (m/s):", style="Custom.TLabel").grid(row=1, column=0, sticky=tk.W,
                                                                                       padx=10, pady=10)
        custom_burn_rate_entry = ttk.Entry(custom_window, width=25, style="Custom.TEntry")
        custom_burn_rate_entry.grid(row=1, column=1, padx=10, pady=10)

        ttk.Label(custom_window, text="Karakteristik Hız (c*):", style="Custom.TLabel").grid(row=2, column=0,
                                                                                             sticky=tk.W, padx=10,
                                                                                             pady=10)
        custom_cstar_entry = ttk.Entry(custom_window, width=25, style="Custom.TEntry")
        custom_cstar_entry.grid(row=2, column=1, padx=10, pady=10)

        ttk.Label(custom_window, text="Yakıt Uzunluğu (m):", style="Custom.TLabel").grid(row=3, column=0, sticky=tk.W,
                                                                                         padx=10, pady=10)
        custom_length_entry = ttk.Entry(custom_window, width=25, style="Custom.TEntry")
        custom_length_entry.grid(row=3, column=1, padx=10, pady=10)

        ttk.Label(custom_window, text="Yakıt Kalınlığı (m):", style="Custom.TLabel").grid(row=4, column=0, sticky=tk.W,
                                                                                          padx=10, pady=10)
        custom_thickness_entry = ttk.Entry(custom_window, width=25, style="Custom.TEntry")
        custom_thickness_entry.grid(row=4, column=1, padx=10, pady=10)

        ttk.Label(custom_window, text="Yakıt Yarıçapı (m):", style="Custom.TLabel").grid(row=5, column=0, sticky=tk.W,
                                                                                         padx=10, pady=10)
        custom_fuel_radius_entry = ttk.Entry(custom_window, width=25, style="Custom.TEntry")
        custom_fuel_radius_entry.grid(row=5, column=1, padx=10, pady=10)

        ttk.Button(custom_window, text="Ekle", command=save_custom_fuel, style="Custom.TButton").grid(row=6, column=0,
                                                                                                      columnspan=2,
                                                                                                      pady=20)

    # -------------------- Optimizasyon Penceresi --------------------
    def open_optimization_window(self):
        """Kullanıcıya hedef itki kuvveti girmesini sağlayan pencereyi açar."""

        def perform_optimization():
            target_thrust = target_entry.get()
            if not target_thrust:
                messagebox.showerror("Hata", "Lütfen hedef itki kuvvetini giriniz.")
                return
            self.optimizer.optimize_parameters(target_thrust)

        optimize_window = tk.Toplevel(self.root)
        optimize_window.title("Parametre Optimizasyonu")
        optimize_window.geometry("350x200")

        ttk.Label(optimize_window, text="Hedef İtki Kuvveti (N):", style="Custom.TLabel").pack(padx=10, pady=20)
        target_entry = ttk.Entry(optimize_window, width=30, style="Custom.TEntry")
        target_entry.pack(padx=10, pady=5)

        ttk.Button(optimize_window, text="Optimizasyonu Başlat", command=perform_optimization,
                   style="Custom.TButton").pack(pady=20)

    # -------------------- Grafik ve Eğitim Modülü --------------------
    def create_graph_and_training_module(self):
        """Grafik çizimleri ve eğitim modülü butonlarını oluşturur."""
        # Grafik butonları için ayrı bir Frame oluşturuyoruz
        graph_buttons_frame = ttk.LabelFrame(
            self.right_frame,
            text="Grafikler",
            style="Custom.TLabelframe"
        )
        graph_buttons_frame.pack(fill='x', padx=10, pady=10)

        # İtki Kuvveti Grafiği
        thrust_graph_button = ttk.Button(
            graph_buttons_frame,
            text="İtki Kuvveti Grafiği",
            command=self.plot_thrust_graph,
            style="Custom.TButton"
        )
        thrust_graph_button.grid(row=0, column=0, padx=5, pady=5, sticky="ew")

        # Kütle Akış Hızı Grafiği
        m_dot_graph_button = ttk.Button(
            graph_buttons_frame,
            text="Kütle Akış Hızı Grafiği",
            command=self.plot_mass_flow_graph,
            style="Custom.TButton"
        )
        m_dot_graph_button.grid(row=0, column=1, padx=5, pady=5, sticky="ew")

        # Egzoz Hızı Grafiği
        exit_vel_graph_button = ttk.Button(
            graph_buttons_frame,
            text="Egzoz Hızı Grafiği",
            command=self.plot_exit_velocity_graph,
            style="Custom.TButton"
        )
        exit_vel_graph_button.grid(row=0, column=2, padx=5, pady=5, sticky="ew")

        # Sütun Ağırlıklarını Ayarlamak için
        for i in range(3):
            graph_buttons_frame.columnconfigure(i, weight=1)

        # Eğitim Modülü Butonu
        training_module_button = ttk.Button(
            self.right_frame,
            text="Eğitim Modülünü Aç",
            command=self.open_training_module,
            style="Custom.TButton"
        )
        training_module_button.pack(pady=10, fill='x', padx=10)

    # -------------------- Eğitim Modülü --------------------
    def open_training_module(self):
        """Kullanıcıya eğitim modülünü gösterir. 5 sayfadan oluşur."""
        training_window = tk.Toplevel(self.root)
        training_window.title("Eğitim Modülü")
        training_window.geometry("800x600")

        # Eğitim modülü için sayfa yönetimi
        class TrainingModule:
            def __init__(self, master):
                self.master = master
                self.current_page = 0
                self.pages = []
                self.create_pages()

                # Navigation Buttons
                nav_frame = ttk.Frame(master)
                nav_frame.pack(pady=10)

                self.prev_button = ttk.Button(nav_frame, text="Önceki", command=self.prev_page, style="Custom.TButton")
                self.prev_button.grid(row=0, column=0, padx=5)
                self.next_button = ttk.Button(nav_frame, text="Sonraki", command=self.next_page, style="Custom.TButton")
                self.next_button.grid(row=0, column=1, padx=5)

                self.display_page(self.current_page)

            def create_pages(self):
                """Eğitim modülü sayfalarını oluşturur."""
                contents = [
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 1**

### **1. Roket Motorunun Temel Bileşenleri**
- **Yanma Odası:** Yakıt ve oksitleyicinin karışıp yandığı bölge.
- **Boğaz:** Yanma odasından egzoza doğru daralan nozul bölgesi.
- **Nozzle (Egzoz):** Gazların hızla dışarı atıldığı genişleyen nozul bölgesi.
- **Yakıt ve Oksitleyici Depoları:** Yakıt ve oksitleyicilerin saklandığı depolar.

### **Kaynaklar ve Daha Fazlası**
- [NASA Rocket Propulsion](https://www.nasa.gov/mission_pages/launch/rockets.html)
- [Wikipedia - Roket Motoru](https://tr.wikipedia.org/wiki/Roket_motoru)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 2**

### **2. Roket Motoru Tasarım Prensipleri**
- **Kütle Akış Hızı (ṁ):** Yanma odasından geçerek egzoza çıkan yakıtın kütle miktarı.
- **Egzoz Hızı (v_e):** Yakıtın yanması sonucu oluşan gazların hızıdır.
- **İtki Kuvveti (F):** Roket motorunun ürettiği kuvvet. 
  \[ F = (\dot{m} \cdot v_e) + (P_e - P_a) \cdot A_e \]

### **Termodinamik İlkeler**
- **Isotermik ve Adyabatik Prosesler:** Yanma sürecinde ısı transferi ve basınç değişimleri.
- **Spesifik Gaz Sabiti (R):** Gazın özelliğine bağlı sabit.
- **Isı Kapasitesi Oranları (γ):** Gazın termodinamik davranışını belirler.

### **Kaynaklar ve Daha Fazlası**
- [Roket Bilimi ve Teknolojisi](https://www.sciencedirect.com/topics/engineering/rocket-propulsion)
- [Wikipedia - Termodinamik](https://tr.wikipedia.org/wiki/Termodinamik)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 3**

### **3. Termodinamik Hesaplamalar**
- **Egzoz Hızı Hesaplaması:**
  \[ v_e = \sqrt{\frac{2 \gamma}{\gamma - 1} R T_c \left(1 - \left(\frac{P_e}{P_c}\right)^{\frac{\gamma - 1}{\gamma}}\right)} \]
- **Kütle Akış Hızı Hesaplaması:**
  \[ \dot{m} = \rho \cdot A_t \cdot \sqrt{\gamma \cdot R \cdot T_t} \]
- **İtki Kuvveti Hesaplaması:**
  \[ F = (\dot{m} \cdot v_e) + (P_e - P_a) \cdot A_e \ ]

### **Gaz Dinamikleri**
- **Choked Flow (Daralma Akışı):** Boğaz alanında maksimum kütle akış hızı.
- **Mach Sayısı:** Hızın ses hızına oranı.
- **Reynolds Sayısı:** Akışın laminer veya türbülanslı olup olmadığını belirler.

### **Kaynaklar ve Daha Fazlası**
- [Thermodynamics in Rocket Engines](https://www.grc.nasa.gov/www/k-12/airplane/mach.html)
- [Wikipedia - Termodinamik](https://tr.wikipedia.org/wiki/Termodinamik)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 4**

### **4. Nozzle Tasarımı ve Egzoz Hızı**
- **Nozzle Tipleri:**
  - **De Laval Nozzle:** Dar boğaz ve geniş egzoz bölgesi ile yüksek egzoz hızları sağlar.
  - **Conical Nozzle:** Basit yapılı, düşük performanslı nozul.
  - **Bell Nozzle:** Yüksek verimlilik ve düşük ses emisyonları için optimize edilmiş nozul.
- **Egzoz Hızı Optimizasyonu:**
  - Nozzle genişleme oranının (exit diameter / throat diameter) doğru ayarlanması.
  - Ortam basıncı ile egzoz çıkış basıncının dengelenmesi.

### **Pratik Örnekler ve Hesaplamalar**
- **Örnek Hesaplama:** RP-1 / LOX çiftli bir roket motoru için itki kuvveti hesaplaması.
- **Grafiklerin Analizi:** İtki kuvveti, kütle akış hızı ve egzoz hızı zamanla nasıl değişir.

### **Kaynaklar ve Daha Fazlası**
- [Rocket Nozzle Design](https://www.grc.nasa.gov/www/k-12/airplane/nozzle.html)
- [Wikipedia - Rocket Nozzle](https://tr.wikipedia.org/wiki/Roket_nozulu)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 5**

### **5. Performans Optimizasyonu ve Kaynaklar**
- **Performans Optimizasyonu:**
  - Hedef itki kuvvetine ulaşmak için parametrelerin ayarlanması.
  - Yanma hızı, yakıt kalınlığı ve yanma odası basıncının optimizasyonu.
- **Optimizasyon Yöntemleri:**
  - Matematiksel yöntemler (Örneğin, Newton-Raphson Yöntemi).
  - Simülasyon ve modelleme teknikleri.
- **Güvenlik ve Testler:**
  - Roket motoru testlerinin güvenli bir şekilde gerçekleştirilmesi.
  - Malzeme seçimi ve dayanıklılık analizleri.

### **Ek Kaynaklar ve Okumalar**
- [Rocket Propulsion Elements by George P. Sutton](https://www.amazon.com/Rocket-Propulsion-Elements-George-Sutton/dp/0071388449)
- [NASA Glenn Research Center - Rocket Propulsion](https://www.grc.nasa.gov/www/k-12/airplane/rocket.html)
- [Wikipedia - Rocket Design](https://tr.wikipedia.org/wiki/Roket_tasarımı)
- [AIAA (American Institute of Aeronautics and Astronautics)](https://www.aiaa.org/)
- [SpaceX Research and Development](https://www.spacex.com/research)

### **Sonuç**
Roket motoru tasarımı ve hesaplamaları, kapsamlı bir bilgi birikimi ve dikkatli planlama gerektirir. Bu eğitim modülü ile temel prensipleri anlamış ve pratik uygulamalar için gerekli araçlara sahip olabilirsiniz.
"""
                ]

                for content in contents:
                    frame = tk.Frame(self.master, background="#f0f0f0")
                    text_widget = tk.Text(
                        frame,
                        wrap="word",
                        padx=10,
                        pady=10,
                        background="#f0f0f0",
                        font=('Helvetica', 10)
                    )
                    text_widget.insert(tk.END, content)
                    text_widget.config(state=tk.DISABLED)
                    text_widget.pack(expand=True, fill='both')
                    self.pages.append(frame)

            def display_page(self, page_number):
                """Belirli bir sayfayı gösterir."""
                for i, page in enumerate(self.pages):
                    if i == page_number:
                        page.pack(fill='both', expand=True, padx=10, pady=10)
                    else:
                        page.pack_forget()

                # Navigation Buttons'ın durumunu ayarla
                if self.current_page == 0:
                    self.prev_button.config(state='disabled')
                else:
                    self.prev_button.config(state='normal')

                if self.current_page == len(self.pages) - 1:
                    self.next_button.config(text="Kapat", command=self.close_window)
                else:
                    self.next_button.config(text="Sonraki", command=self.next_page)

            def next_page(self):
                """Sonraki sayfaya geçiş yapar veya pencereyi kapatır."""
                if self.current_page < len(self.pages) - 1:
                    self.current_page += 1
                    self.display_page(self.current_page)
                else:
                    self.close_window()

            def prev_page(self):
                """Önceki sayfaya geçiş yapar."""
                if self.current_page > 0:
                    self.current_page -= 1
                    self.display_page(self.current_page)

            def close_window(self):
                """Eğitim modülü penceresini kapatır."""
                self.master.destroy()

        TrainingModule(training_window)

    # -------------------- Hesaplama ve Sonuç Gösterme --------------------
    def calculate(self):
        """Hesaplamaları gerçekleştirir ve sonuçları günceller."""
        self.thrust_list = []
        self.m_dot_list = []
        self.exit_vel_list = []
        self.time_points = []

        chosen_type = self.rocket_type_var.get()

        # Girdi Doğrulama
        try:
            burn_time = parse_float(self.burn_time_entry.get(), "Yanma Süresi")
            if burn_time <= 0:
                raise ValueError("Yanma süresi pozitif bir sayı olmalıdır.")
        except ValueError as ve:
            messagebox.showerror("Hata", f"Lütfen geçerli bir yanma süresi giriniz.\n{ve}")
            return

        try:
            time_step = parse_float(self.time_step_entry.get(), "Zaman Adımı")
            if time_step <= 0:
                raise ValueError("Zaman adımı pozitif bir sayı olmalıdır.")
        except ValueError as ve:
            messagebox.showerror("Hata", f"Lütfen geçerli bir zaman adımı giriniz.\n{ve}")
            return

        # Zaman Dizisi Oluştur
        self.time_points = np.arange(0, burn_time + time_step, time_step)

        if chosen_type == "Sıvı Yakıt":
            self.calculate_liquid_fuel(burn_time, time_step)
        elif chosen_type == "Katı Yakıt":
            self.calculate_solid_fuel(burn_time, time_step)
        else:
            messagebox.showwarning("Uyarı", "Lütfen bir yakıt türü seçin.")

    def calculate_liquid_fuel(self, burn_time, time_step):
        """Sıvı yakıt hesaplamalarını gerçekleştirir."""
        try:
            fuel_pair = self.pair_var.get()
            chamber_pressure = parse_float(self.chamber_pressure_entry.get(), "Yanma Odası Basıncı")
            exit_pressure = parse_float(self.exit_pressure_entry.get(), "Egzoz Çıkış Basıncı")
            chamber_temperature = parse_float(self.chamber_temperature_entry.get(), "Yanma Odası Sıcaklığı")
            throat_diameter = parse_float(self.throat_diameter_entry.get(), "Boğaz Çapı") / 1000  # mm to m
            exit_diameter = parse_float(self.exit_diameter_entry.get(), "Egzoz Çıkış Çapı") / 1000  # mm to m
            ambient_pressure = parse_float(self.ambient_pressure_entry.get(), "Ortam Basıncı")

            # Yakıt Özelliklerini Al
            properties = self.calculator.liquid_fuel_properties.get(fuel_pair, {})
            if not properties:
                raise ValueError("Geçersiz yakıt/oksitleyici çifti.")

            R = properties["R"]
            gamma = properties["gamma"]

            # Boğaz ve egzoz alanları
            throat_area = math.pi * (throat_diameter / 2) ** 2
            exit_area = math.pi * (exit_diameter / 2) ** 2

            for t in self.time_points:
                # Parametrelerin zamanla değişmediğini varsayıyoruz.
                m_dot = self.calculator.calculate_mass_flow_rate_liquid(chamber_pressure, throat_area, R,
                                                                        chamber_temperature, gamma)
                exit_vel = self.calculator.calculate_exit_velocity_liquid(chamber_pressure, exit_pressure,
                                                                          chamber_temperature, R, gamma)
                thrust = self.calculator.calculate_thrust_liquid(m_dot, exit_vel, exit_pressure, exit_area,
                                                                 ambient_pressure)

                self.thrust_list.append(thrust)
                self.m_dot_list.append(m_dot)
                self.exit_vel_list.append(exit_vel)

            # Toplam İtki Hesaplama
            total_impulse = sum([f * time_step for f in self.thrust_list])

            # Toplam Yakıt Tüketimi Hesaplama
            total_mass_consumed = sum([m * time_step for m in self.m_dot_list])

            # Sonuçları Göster
            result = (
                f"Seçilen Yakıt: {fuel_pair}\n"
                f"Toplam Yanma Süresi: {burn_time} s\n"
                f"Kütle Akış Hızı (Ortalama): {np.mean(self.m_dot_list):.2f} kg/s\n"
                f"Egzoz Hızı (Ortalama): {np.mean(self.exit_vel_list):.2f} m/s\n"
                f"İtki Kuvveti (Ortalama): {np.mean(self.thrust_list):.2f} N\n"
                f"Toplam İtki: {total_impulse:.2f} Ns\n"
                f"Toplam Yakıt Tüketimi: {total_mass_consumed:.2f} kg\n"
                f"Yanma Odası Basıncı: {chamber_pressure:.2f} Pa\n"
                f"Egzoz Çıkış Basıncı: {exit_pressure:.2f} Pa\n"
                f"Ortam Basıncı: {ambient_pressure:.2f} Pa\n"
                f"Boğaz Çapı: {throat_diameter:.2f} m\n"
                f"Egzoz Çıkış Çapı: {exit_diameter:.2f} m\n"
                f"Yanma Odası Sıcaklığı: {chamber_temperature:.2f} K"
            )
            self.display_result(result)

            # Global Değişkenleri Güncelle
            self.last_calculated_thrust = np.mean(self.thrust_list)
            self.last_calculated_m_dot = np.mean(self.m_dot_list)
            self.last_calculated_exit_vel = np.mean(self.exit_vel_list)
            self.last_burn_rate = 0  # Sıvı yakıt için
            self.last_thickness = 0  # Sıvı yakıt için
            self.last_chamber_pressure = chamber_pressure
        except ValueError as ve:
            messagebox.showerror("Hata", f"Lütfen geçerli bir hedef itki kuvveti giriniz.\n{ve}")

    def calculate_solid_fuel(self, burn_time, time_step):
        """Katı yakıt hesaplamalarını gerçekleştirir."""
        try:
            selected_fuel = self.solid_fuel_var.get()
            properties = self.calculator.solid_fuel_properties.get(selected_fuel, {})
            if not properties:
                raise ValueError("Geçersiz yakıt türü seçildi.")

            length = parse_float(self.length_entry.get(), "Yakıt Uzunluğu")  # m
            thickness = parse_float(self.thickness_entry.get(), "Yakıt Kalınlığı")  # m
            burn_rate = parse_float(self.burn_rate_entry.get(), "Yanma Hızı")  # m/s
            cstar_val = parse_float(self.cstar_entry.get(), "Karakteristik Hız")  # m/s
            fuel_radius = properties.get("fuel_radius", 0.05)  # m

            # Yanma hızı ve karakteristik hızın mantıklı olup olmadığını kontrol et
            if not (0.005 <= burn_rate <= 0.02):
                messagebox.showwarning("Uyarı", "Yanma hızı (burn rate) genellikle 0.005 - 0.02 m/s aralığındadır.")
            if not (1400 <= cstar_val <= 2000):
                messagebox.showwarning("Uyarı", "Karakteristik hız (c*) genellikle 1400 - 2000 m/s aralığındadır.")

            for t in self.time_points:
                # Parametrelerin zamanla değişmediğini varsayıyoruz.
                thrust, m_dot = self.calculator.calculate_solid_thrust(length, thickness, burn_rate, cstar_val,
                                                                       fuel_radius)
                self.thrust_list.append(thrust)
                self.m_dot_list.append(m_dot)
                self.exit_vel_list.append(cstar_val)  # Katı yakıtta c* kullanıyoruz

            # Toplam İtki Hesaplama
            total_impulse = sum([f * time_step for f in self.thrust_list])

            # Toplam Yakıt Tüketimi Hesaplama
            total_mass_consumed = sum([m * time_step for m in self.m_dot_list])

            # Sonuçları Göster
            result = (
                f"Katı Yakıt Seçildi: {selected_fuel}\n"
                f"Toplam Yanma Süresi: {burn_time} s\n"
                f"İtki Kuvveti (Ortalama): {np.mean(self.thrust_list):.2f} N\n"
                f"Kütle Akış Hızı (Ortalama): {np.mean(self.m_dot_list):.2f} kg/s\n"
                f"Karakteristik Hız (c*): {cstar_val:.2f} m/s\n"
                f"Toplam İtki: {total_impulse:.2f} Ns\n"
                f"Toplam Yakıt Tüketimi: {total_mass_consumed:.2f} kg\n"
                f"Yakıt Uzunluğu: {length:.2f} m\n"
                f"Yakıt Kalınlığı: {thickness:.2f} m"
            )
            self.display_result(result)

            # Global Değişkenleri Güncelle
            self.last_calculated_thrust = np.mean(self.thrust_list)
            self.last_calculated_m_dot = np.mean(self.m_dot_list)
            self.last_calculated_exit_vel = cstar_val
            self.last_burn_rate = burn_rate
            self.last_thickness = thickness
            self.last_chamber_pressure = 0  # Katı yakıt için

        except ValueError as ve:
            messagebox.showerror("Hata", f"Lütfen girişlerinizi kontrol edin.\n{ve}")
        except Exception as e:
            messagebox.showerror("Hata", f"Bir hata oluştu:\n{e}")

    # -------------------- Sonuçları Gösterme --------------------
    def display_result(self, result):
        """Hesaplama sonuçlarını ekranda gösterir."""
        self.result_display.config(state=tk.NORMAL)
        self.result_display.delete(1.0, tk.END)
        self.result_display.insert(tk.END, result)
        self.result_display.config(state=tk.DISABLED)

    # -------------------- Grafik Fonksiyonları --------------------
    def plot_thrust_graph(self):
        """İtki Kuvveti Grafiğini çizer ve yeni bir pencere açar."""
        if not self.thrust_list:
            messagebox.showerror("Hata", "Lütfen önce hesaplama yapınız.")
            return

        graph_window = tk.Toplevel(self.root)
        graph_window.title("İtki Kuvveti Grafiği")
        graph_window.geometry("800x600")

        fig, ax = plt.subplots(figsize=(8, 6))
        ax.plot(self.time_points, self.thrust_list, color='tab:blue', label='İtki Kuvveti')
        ax.set_xlabel('Zaman (s)', fontsize=12)
        ax.set_ylabel('İtki Kuvveti (N)', fontsize=12)
        ax.set_title('İtki Kuvveti Zaman Serisi', fontsize=14)
        ax.grid(True)
        ax.legend()

        canvas = FigureCanvasTkAgg(fig, master=graph_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill='both', expand=True)

    def plot_mass_flow_graph(self):
        """Kütle Akış Hızı Grafiğini çizer ve yeni bir pencere açar."""
        if not self.m_dot_list:
            messagebox.showerror("Hata", "Lütfen önce hesaplama yapınız.")
            return

        graph_window = tk.Toplevel(self.root)
        graph_window.title("Kütle Akış Hızı Grafiği")
        graph_window.geometry("800x600")

        fig, ax = plt.subplots(figsize=(8, 6))
        ax.plot(self.time_points, self.m_dot_list, color='tab:green', label='Kütle Akış Hızı')
        ax.set_xlabel('Zaman (s)', fontsize=12)
        ax.set_ylabel('Kütle Akış Hızı (kg/s)', fontsize=12)
        ax.set_title('Kütle Akış Hızı Zaman Serisi', fontsize=14)
        ax.grid(True)
        ax.legend()

        canvas = FigureCanvasTkAgg(fig, master=graph_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill='both', expand=True)

    def plot_exit_velocity_graph(self):
        """Egzoz Hızı Grafiğini çizer ve yeni bir pencere açar."""
        if not self.exit_vel_list:
            messagebox.showerror("Hata", "Lütfen önce hesaplama yapınız.")
            return

        graph_window = tk.Toplevel(self.root)
        graph_window.title("Egzoz Hızı Grafiği")
        graph_window.geometry("800x600")

        fig, ax = plt.subplots(figsize=(8, 6))
        ax.plot(self.time_points, self.exit_vel_list, color='tab:red', label='Egzoz Hızı')
        ax.set_xlabel('Zaman (s)', fontsize=12)
        ax.set_ylabel('Egzoz Hızı (m/s)', fontsize=12)
        ax.set_title('Egzoz Hızı Zaman Serisi', fontsize=14)
        ax.grid(True)
        ax.legend()

        canvas = FigureCanvasTkAgg(fig, master=graph_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill='both', expand=True)

    # -------------------- Eğitim Modülü --------------------
    def open_training_module(self):
        """Kullanıcıya eğitim modülünü gösterir. 5 sayfadan oluşur."""
        training_window = tk.Toplevel(self.root)
        training_window.title("Eğitim Modülü")
        training_window.geometry("800x600")

        # Eğitim modülü için sayfa yönetimi
        class TrainingModule:
            def __init__(self, master):
                self.master = master
                self.current_page = 0
                self.pages = []
                self.create_pages()

                # Navigation Buttons
                nav_frame = ttk.Frame(master)
                nav_frame.pack(pady=10)

                self.prev_button = ttk.Button(nav_frame, text="Önceki", command=self.prev_page, style="Custom.TButton")
                self.prev_button.grid(row=0, column=0, padx=5)
                self.next_button = ttk.Button(nav_frame, text="Sonraki", command=self.next_page, style="Custom.TButton")
                self.next_button.grid(row=0, column=1, padx=5)

                self.display_page(self.current_page)

            def create_pages(self):
                """Eğitim modülü sayfalarını oluşturur."""
                contents = [
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 1**

### **1. Roket Motorunun Temel Bileşenleri**
- **Yanma Odası:** Yakıt ve oksitleyicinin karışıp yandığı bölge.
- **Boğaz:** Yanma odasından egzoza doğru daralan nozul bölgesi.
- **Nozzle (Egzoz):** Gazların hızla dışarı atıldığı genişleyen nozul bölgesi.
- **Yakıt ve Oksitleyici Depoları:** Yakıt ve oksitleyicilerin saklandığı depolar.

### **Kaynaklar ve Daha Fazlası**
- [NASA Rocket Propulsion](https://www.nasa.gov/mission_pages/launch/rockets.html)
- [Wikipedia - Roket Motoru](https://tr.wikipedia.org/wiki/Roket_motoru)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 2**

### **2. Roket Motoru Tasarım Prensipleri**
- **Kütle Akış Hızı (ṁ):** Yanma odasından geçerek egzoza çıkan yakıtın kütle miktarı.
- **Egzoz Hızı (v_e):** Yakıtın yanması sonucu oluşan gazların hızıdır.
- **İtki Kuvveti (F):** Roket motorunun ürettiği kuvvet. 
  \[ F = (\dot{m} \cdot v_e) + (P_e - P_a) \cdot A_e \]

### **Termodinamik İlkeler**
- **Isotermik ve Adyabatik Prosesler:** Yanma sürecinde ısı transferi ve basınç değişimleri.
- **Spesifik Gaz Sabiti (R):** Gazın özelliğine bağlı sabit.
- **Isı Kapasitesi Oranları (γ):** Gazın termodinamik davranışını belirler.

### **Kaynaklar ve Daha Fazlası**
- [Roket Bilimi ve Teknolojisi](https://www.sciencedirect.com/topics/engineering/rocket-propulsion)
- [Wikipedia - Termodinamik](https://tr.wikipedia.org/wiki/Termodinamik)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 3**

### **3. Termodinamik Hesaplamalar**
- **Egzoz Hızı Hesaplaması:**
  \[ v_e = \sqrt{\frac{2 \gamma}{\gamma - 1} R T_c \left(1 - \left(\frac{P_e}{P_c}\right)^{\frac{\gamma - 1}{\gamma}}\right)} \]
- **Kütle Akış Hızı Hesaplaması:**
  \[ \dot{m} = \rho \cdot A_t \cdot \sqrt{\gamma \cdot R \cdot T_t} \]
- **İtki Kuvveti Hesaplaması:**
  \[ F = (\dot{m} \cdot v_e) + (P_e - P_a) \cdot A_e \ ]

### **Gaz Dinamikleri**
- **Choked Flow (Daralma Akışı):** Boğaz alanında maksimum kütle akış hızı.
- **Mach Sayısı:** Hızın ses hızına oranı.
- **Reynolds Sayısı:** Akışın laminer veya türbülanslı olup olmadığını belirler.

### **Kaynaklar ve Daha Fazlası**
- [Thermodynamics in Rocket Engines](https://www.grc.nasa.gov/www/k-12/airplane/mach.html)
- [Wikipedia - Termodinamik](https://tr.wikipedia.org/wiki/Termodinamik)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 4**

### **4. Nozzle Tasarımı ve Egzoz Hızı**
- **Nozzle Tipleri:**
  - **De Laval Nozzle:** Dar boğaz ve geniş egzoz bölgesi ile yüksek egzoz hızları sağlar.
  - **Conical Nozzle:** Basit yapılı, düşük performanslı nozul.
  - **Bell Nozzle:** Yüksek verimlilik ve düşük ses emisyonları için optimize edilmiş nozul.
- **Egzoz Hızı Optimizasyonu:**
  - Nozzle genişleme oranının (exit diameter / throat diameter) doğru ayarlanması.
  - Ortam basıncı ile egzoz çıkış basıncının dengelenmesi.

### **Pratik Örnekler ve Hesaplamalar**
- **Örnek Hesaplama:** RP-1 / LOX çiftli bir roket motoru için itki kuvveti hesaplaması.
- **Grafiklerin Analizi:** İtki kuvveti, kütle akış hızı ve egzoz hızı zamanla nasıl değişir.

### **Kaynaklar ve Daha Fazlası**
- [Rocket Nozzle Design](https://www.grc.nasa.gov/www/k-12/airplane/nozzle.html)
- [Wikipedia - Rocket Nozzle](https://tr.wikipedia.org/wiki/Roket_nozulu)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 5**

### **5. Performans Optimizasyonu ve Kaynaklar**
- **Performans Optimizasyonu:**
  - Hedef itki kuvvetine ulaşmak için parametrelerin ayarlanması.
  - Yanma hızı, yakıt kalınlığı ve yanma odası basıncının optimizasyonu.
- **Optimizasyon Yöntemleri:**
  - Matematiksel yöntemler (Örneğin, Newton-Raphson Yöntemi).
  - Simülasyon ve modelleme teknikleri.
- **Güvenlik ve Testler:**
  - Roket motoru testlerinin güvenli bir şekilde gerçekleştirilmesi.
  - Malzeme seçimi ve dayanıklılık analizleri.

### **Ek Kaynaklar ve Okumalar**
- [Rocket Propulsion Elements by George P. Sutton](https://www.amazon.com/Rocket-Propulsion-Elements-George-Sutton/dp/0071388449)
- [NASA Glenn Research Center - Rocket Propulsion](https://www.grc.nasa.gov/www/k-12/airplane/rocket.html)
- [Wikipedia - Rocket Design](https://tr.wikipedia.org/wiki/Roket_tasarımı)
- [AIAA (American Institute of Aeronautics and Astronautics)](https://www.aiaa.org/)
- [SpaceX Research and Development](https://www.spacex.com/research)

### **Sonuç**
Roket motoru tasarımı ve hesaplamaları, kapsamlı bir bilgi birikimi ve dikkatli planlama gerektirir. Bu eğitim modülü ile temel prensipleri anlamış ve pratik uygulamalar için gerekli araçlara sahip olabilirsiniz.
"""
                ]

                for content in contents:
                    frame = tk.Frame(self.master, background="#f0f0f0")
                    text_widget = tk.Text(
                        frame,
                        wrap="word",
                        padx=10,
                        pady=10,
                        background="#f0f0f0",
                        font=('Helvetica', 10)
                    )
                    text_widget.insert(tk.END, content)
                    text_widget.config(state=tk.DISABLED)
                    text_widget.pack(expand=True, fill='both')
                    self.pages.append(frame)

            def display_page(self, page_number):
                """Belirli bir sayfayı gösterir."""
                for i, page in enumerate(self.pages):
                    if i == page_number:
                        page.pack(fill='both', expand=True, padx=10, pady=10)
                    else:
                        page.pack_forget()

                # Navigation Buttons'ın durumunu ayarla
                if self.current_page == 0:
                    self.prev_button.config(state='disabled')
                else:
                    self.prev_button.config(state='normal')

                if self.current_page == len(self.pages) - 1:
                    self.next_button.config(text="Kapat", command=self.close_window)
                else:
                    self.next_button.config(text="Sonraki", command=self.next_page)

            def next_page(self):
                """Sonraki sayfaya geçiş yapar veya pencereyi kapatır."""
                if self.current_page < len(self.pages) - 1:
                    self.current_page += 1
                    self.display_page(self.current_page)
                else:
                    self.close_window()

            def prev_page(self):
                """Önceki sayfaya geçiş yapar."""
                if self.current_page > 0:
                    self.current_page -= 1
                    self.display_page(self.current_page)

            def close_window(self):
                """Eğitim modülü penceresini kapatır."""
                self.master.destroy()

        TrainingModule(training_window)

    # -------------------- Hesaplama Fonksiyonları --------------------
    def calculate(self):
        """Hesaplamaları gerçekleştirir ve sonuçları günceller."""
        self.thrust_list = []
        self.m_dot_list = []
        self.exit_vel_list = []
        self.time_points = []

        chosen_type = self.rocket_type_var.get()

        # Girdi Doğrulama
        try:
            burn_time = parse_float(self.burn_time_entry.get(), "Yanma Süresi")
            if burn_time <= 0:
                raise ValueError("Yanma süresi pozitif bir sayı olmalıdır.")
        except ValueError as ve:
            messagebox.showerror("Hata", f"Lütfen geçerli bir yanma süresi giriniz.\n{ve}")
            return

        try:
            time_step = parse_float(self.time_step_entry.get(), "Zaman Adımı")
            if time_step <= 0:
                raise ValueError("Zaman adımı pozitif bir sayı olmalıdır.")
        except ValueError as ve:
            messagebox.showerror("Hata", f"Lütfen geçerli bir zaman adımı giriniz.\n{ve}")
            return

        # Zaman Dizisi Oluştur
        self.time_points = np.arange(0, burn_time + time_step, time_step)

        if chosen_type == "Sıvı Yakıt":
            self.calculate_liquid_fuel(burn_time, time_step)
        elif chosen_type == "Katı Yakıt":
            self.calculate_solid_fuel(burn_time, time_step)
        else:
            messagebox.showwarning("Uyarı", "Lütfen bir yakıt türü seçin.")

    def calculate_liquid_fuel(self, burn_time, time_step):
        """Sıvı yakıt hesaplamalarını gerçekleştirir."""
        try:
            fuel_pair = self.pair_var.get()
            chamber_pressure = parse_float(self.chamber_pressure_entry.get(), "Yanma Odası Basıncı")
            exit_pressure = parse_float(self.exit_pressure_entry.get(), "Egzoz Çıkış Basıncı")
            chamber_temperature = parse_float(self.chamber_temperature_entry.get(), "Yanma Odası Sıcaklığı")
            throat_diameter = parse_float(self.throat_diameter_entry.get(), "Boğaz Çapı") / 1000  # mm to m
            exit_diameter = parse_float(self.exit_diameter_entry.get(), "Egzoz Çıkış Çapı") / 1000  # mm to m
            ambient_pressure = parse_float(self.ambient_pressure_entry.get(), "Ortam Basıncı")

            # Yakıt Özelliklerini Al
            properties = self.calculator.liquid_fuel_properties.get(fuel_pair, {})
            if not properties:
                raise ValueError("Geçersiz yakıt/oksitleyici çifti.")

            R = properties["R"]
            gamma = properties["gamma"]

            # Boğaz ve egzoz alanları
            throat_area = math.pi * (throat_diameter / 2) ** 2
            exit_area = math.pi * (exit_diameter / 2) ** 2

            for t in self.time_points:
                # Parametrelerin zamanla değişmediğini varsayıyoruz.
                m_dot = self.calculator.calculate_mass_flow_rate_liquid(chamber_pressure, throat_area, R,
                                                                        chamber_temperature, gamma)
                exit_vel = self.calculator.calculate_exit_velocity_liquid(chamber_pressure, exit_pressure,
                                                                          chamber_temperature, R, gamma)
                thrust = self.calculator.calculate_thrust_liquid(m_dot, exit_vel, exit_pressure, exit_area,
                                                                 ambient_pressure)

                self.thrust_list.append(thrust)
                self.m_dot_list.append(m_dot)
                self.exit_vel_list.append(exit_vel)

            # Toplam İtki Hesaplama
            total_impulse = sum([f * time_step for f in self.thrust_list])

            # Toplam Yakıt Tüketimi Hesaplama
            total_mass_consumed = sum([m * time_step for m in self.m_dot_list])

            # Sonuçları Göster
            result = (
                f"Seçilen Yakıt: {fuel_pair}\n"
                f"Toplam Yanma Süresi: {burn_time} s\n"
                f"Kütle Akış Hızı (Ortalama): {np.mean(self.m_dot_list):.2f} kg/s\n"
                f"Egzoz Hızı (Ortalama): {np.mean(self.exit_vel_list):.2f} m/s\n"
                f"İtki Kuvveti (Ortalama): {np.mean(self.thrust_list):.2f} N\n"
                f"Toplam İtki: {total_impulse:.2f} Ns\n"
                f"Toplam Yakıt Tüketimi: {total_mass_consumed:.2f} kg\n"
                f"Yanma Odası Basıncı: {chamber_pressure:.2f} Pa\n"
                f"Egzoz Çıkış Basıncı: {exit_pressure:.2f} Pa\n"
                f"Ortam Basıncı: {ambient_pressure:.2f} Pa\n"
                f"Boğaz Çapı: {throat_diameter:.2f} m\n"
                f"Egzoz Çıkış Çapı: {exit_diameter:.2f} m\n"
                f"Yanma Odası Sıcaklığı: {chamber_temperature:.2f} K"
            )
            self.display_result(result)

            # Global Değişkenleri Güncelle
            self.last_calculated_thrust = np.mean(self.thrust_list)
            self.last_calculated_m_dot = np.mean(self.m_dot_list)
            self.last_calculated_exit_vel = np.mean(self.exit_vel_list)
            self.last_burn_rate = 0  # Sıvı yakıt için
            self.last_thickness = 0  # Sıvı yakıt için
            self.last_chamber_pressure = chamber_pressure
        except ValueError as ve:
            messagebox.showerror("Hata", f"Lütfen geçerli bir hedef itki kuvveti giriniz.\n{ve}")
        def calculate_solid_fuel(self, burn_time, time_step):
            """Katı yakıt hesaplamalarını gerçekleştirir."""
            try:
                selected_fuel = self.solid_fuel_var.get()
                properties = self.calculator.solid_fuel_properties.get(selected_fuel, {})
                if not properties:
                    raise ValueError("Geçersiz yakıt türü seçildi.")

                length = parse_float(self.length_entry.get(), "Yakıt Uzunluğu")  # m
                thickness = parse_float(self.thickness_entry.get(), "Yakıt Kalınlığı")  # m
                burn_rate = parse_float(self.burn_rate_entry.get(), "Yanma Hızı")  # m/s
                cstar_val = parse_float(self.cstar_entry.get(), "Karakteristik Hız")  # m/s
                fuel_radius = properties.get("fuel_radius", 0.05)  # m

                # Yanma hızı ve karakteristik hızın mantıklı olup olmadığını kontrol et
                if not (0.005 <= burn_rate <= 0.02):
                    messagebox.showwarning("Uyarı", "Yanma hızı (burn rate) genellikle 0.005 - 0.02 m/s aralığındadır.")
                if not (1400 <= cstar_val <= 2000):
                    messagebox.showwarning("Uyarı", "Karakteristik hız (c*) genellikle 1400 - 2000 m/s aralığındadır.")

                for t in self.time_points:
                    # Parametrelerin zamanla değişmediğini varsayıyoruz.
                    thrust, m_dot = self.calculator.calculate_solid_thrust(length, thickness, burn_rate, cstar_val,
                                                                           fuel_radius)
                    self.thrust_list.append(thrust)
                    self.m_dot_list.append(m_dot)
                    self.exit_vel_list.append(cstar_val)  # Katı yakıtta c* kullanıyoruz

                # Toplam İtki Hesaplama
                total_impulse = sum([f * time_step for f in self.thrust_list])

                # Toplam Yakıt Tüketimi Hesaplama
                total_mass_consumed = sum([m * time_step for m in self.m_dot_list])

                # Sonuçları Göster
                result = (
                    f"Katı Yakıt Seçildi: {selected_fuel}\n"
                    f"Toplam Yanma Süresi: {burn_time} s\n"
                    f"İtki Kuvveti (Ortalama): {np.mean(self.thrust_list):.2f} N\n"
                    f"Kütle Akış Hızı (Ortalama): {np.mean(self.m_dot_list):.2f} kg/s\n"
                    f"Karakteristik Hız (c*): {cstar_val:.2f} m/s\n"
                    f"Toplam İtki: {total_impulse:.2f} Ns\n"
                    f"Toplam Yakıt Tüketimi: {total_mass_consumed:.2f} kg\n"
                    f"Yakıt Uzunluğu: {length:.2f} m\n"
                    f"Yakıt Kalınlığı: {thickness:.2f} m"
                )
                self.display_result(result)

                # Global Değişkenleri Güncelle
                self.last_calculated_thrust = np.mean(self.thrust_list)
                self.last_calculated_m_dot = np.mean(self.m_dot_list)
                self.last_calculated_exit_vel = cstar_val
                self.last_burn_rate = burn_rate
                self.last_thickness = thickness
                self.last_chamber_pressure = 0  # Katı yakıt için

            except ValueError as ve:
                messagebox.showerror("Hata", f"Lütfen girişlerinizi kontrol edin.\n{ve}")
            except Exception as e:
                messagebox.showerror("Hata", f"Bir hata oluştu:\n{e}")

    # -------------------- Sonuçları Gösterme --------------------
    def display_result(self, result):
        """Hesaplama sonuçlarını ekranda gösterir."""
        self.result_display.config(state=tk.NORMAL)
        self.result_display.delete(1.0, tk.END)
        self.result_display.insert(tk.END, result)
        self.result_display.config(state=tk.DISABLED)

    # -------------------- Grafik Fonksiyonları --------------------
    def plot_thrust_graph(self):
        """İtki Kuvveti Grafiğini çizer ve yeni bir pencere açar."""
        if not self.thrust_list:
            messagebox.showerror("Hata", "Lütfen önce hesaplama yapınız.")
            return

        graph_window = tk.Toplevel(self.root)
        graph_window.title("İtki Kuvveti Grafiği")
        graph_window.geometry("800x600")

        fig, ax = plt.subplots(figsize=(8, 6))
        ax.plot(self.time_points, self.thrust_list, color='tab:blue', label='İtki Kuvveti')
        ax.set_xlabel('Zaman (s)', fontsize=12)
        ax.set_ylabel('İtki Kuvveti (N)', fontsize=12)
        ax.set_title('İtki Kuvveti Zaman Serisi', fontsize=14)
        ax.grid(True)
        ax.legend()

        canvas = FigureCanvasTkAgg(fig, master=graph_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill='both', expand=True)

    def plot_mass_flow_graph(self):
        """Kütle Akış Hızı Grafiğini çizer ve yeni bir pencere açar."""
        if not self.m_dot_list:
            messagebox.showerror("Hata", "Lütfen önce hesaplama yapınız.")
            return

        graph_window = tk.Toplevel(self.root)
        graph_window.title("Kütle Akış Hızı Grafiği")
        graph_window.geometry("800x600")

        fig, ax = plt.subplots(figsize=(8, 6))
        ax.plot(self.time_points, self.m_dot_list, color='tab:green', label='Kütle Akış Hızı')
        ax.set_xlabel('Zaman (s)', fontsize=12)
        ax.set_ylabel('Kütle Akış Hızı (kg/s)', fontsize=12)
        ax.set_title('Kütle Akış Hızı Zaman Serisi', fontsize=14)
        ax.grid(True)
        ax.legend()

        canvas = FigureCanvasTkAgg(fig, master=graph_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill='both', expand=True)

    def plot_exit_velocity_graph(self):
        """Egzoz Hızı Grafiğini çizer ve yeni bir pencere açar."""
        if not self.exit_vel_list:
            messagebox.showerror("Hata", "Lütfen önce hesaplama yapınız.")
            return

        graph_window = tk.Toplevel(self.root)
        graph_window.title("Egzoz Hızı Grafiği")
        graph_window.geometry("800x600")

        fig, ax = plt.subplots(figsize=(8, 6))
        ax.plot(self.time_points, self.exit_vel_list, color='tab:red', label='Egzoz Hızı')
        ax.set_xlabel('Zaman (s)', fontsize=12)
        ax.set_ylabel('Egzoz Hızı (m/s)', fontsize=12)
        ax.set_title('Egzoz Hızı Zaman Serisi', fontsize=14)
        ax.grid(True)
        ax.legend()

        canvas = FigureCanvasTkAgg(fig, master=graph_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill='both', expand=True)

    # -------------------- Eğitim Modülü --------------------
    def open_training_module(self):
        """Kullanıcıya eğitim modülünü gösterir. 5 sayfadan oluşur."""
        training_window = tk.Toplevel(self.root)
        training_window.title("Eğitim Modülü")
        training_window.geometry("800x600")

        # Eğitim modülü için sayfa yönetimi
        class TrainingModule:
            def __init__(self, master):
                self.master = master
                self.current_page = 0
                self.pages = []
                self.create_pages()

                # Navigation Buttons
                nav_frame = ttk.Frame(master)
                nav_frame.pack(pady=10)

                self.prev_button = ttk.Button(nav_frame, text="Önceki", command=self.prev_page, style="Custom.TButton")
                self.prev_button.grid(row=0, column=0, padx=5)
                self.next_button = ttk.Button(nav_frame, text="Sonraki", command=self.next_page, style="Custom.TButton")
                self.next_button.grid(row=0, column=1, padx=5)

                self.display_page(self.current_page)

            def create_pages(self):
                """Eğitim modülü sayfalarını oluşturur."""
                contents = [
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 1**

### **1. Roket Motorunun Temel Bileşenleri**
- **Yanma Odası:** Yakıt ve oksitleyicinin karışıp yandığı bölge.
- **Boğaz:** Yanma odasından egzoza doğru daralan nozul bölgesi.
- **Nozzle (Egzoz):** Gazların hızla dışarı atıldığı genişleyen nozul bölgesi.
- **Yakıt ve Oksitleyici Depoları:** Yakıt ve oksitleyicilerin saklandığı depolar.

### **Kaynaklar ve Daha Fazlası**
- [NASA Rocket Propulsion](https://www.nasa.gov/mission_pages/launch/rockets.html)
- [Wikipedia - Roket Motoru](https://tr.wikipedia.org/wiki/Roket_motoru)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 2**

### **2. Roket Motoru Tasarım Prensipleri**
- **Kütle Akış Hızı (ṁ):** Yanma odasından geçerek egzoza çıkan yakıtın kütle miktarı.
- **Egzoz Hızı (v_e):** Yakıtın yanması sonucu oluşan gazların hızıdır.
- **İtki Kuvveti (F):** Roket motorunun ürettiği kuvvet. 
  \[ F = (\dot{m} \cdot v_e) + (P_e - P_a) \cdot A_e \]

### **Termodinamik İlkeler**
- **Isotermik ve Adyabatik Prosesler:** Yanma sürecinde ısı transferi ve basınç değişimleri.
- **Spesifik Gaz Sabiti (R):** Gazın özelliğine bağlı sabit.
- **Isı Kapasitesi Oranları (γ):** Gazın termodinamik davranışını belirler.

### **Kaynaklar ve Daha Fazlası**
- [Roket Bilimi ve Teknolojisi](https://www.sciencedirect.com/topics/engineering/rocket-propulsion)
- [Wikipedia - Termodinamik](https://tr.wikipedia.org/wiki/Termodinamik)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 3**

### **3. Termodinamik Hesaplamalar**
- **Egzoz Hızı Hesaplaması:**
  \[ v_e = \sqrt{\frac{2 \gamma}{\gamma - 1} R T_c \left(1 - \left(\frac{P_e}{P_c}\right)^{\frac{\gamma - 1}{\gamma}}\right)} \]
- **Kütle Akış Hızı Hesaplaması:**
  \[ \dot{m} = \rho \cdot A_t \cdot \sqrt{\gamma \cdot R \cdot T_t} \]
- **İtki Kuvveti Hesaplaması:**
  \[ F = (\dot{m} \cdot v_e) + (P_e - P_a) \cdot A_e \ ]

### **Gaz Dinamikleri**
- **Choked Flow (Daralma Akışı):** Boğaz alanında maksimum kütle akış hızı.
- **Mach Sayısı:** Hızın ses hızına oranı.
- **Reynolds Sayısı:** Akışın laminer veya türbülanslı olup olmadığını belirler.

### **Kaynaklar ve Daha Fazlası**
- [Thermodynamics in Rocket Engines](https://www.grc.nasa.gov/www/k-12/airplane/mach.html)
- [Wikipedia - Termodinamik](https://tr.wikipedia.org/wiki/Termodinamik)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 4**

### **4. Nozzle Tasarımı ve Egzoz Hızı**
- **Nozzle Tipleri:**
  - **De Laval Nozzle:** Dar boğaz ve geniş egzoz bölgesi ile yüksek egzoz hızları sağlar.
  - **Conical Nozzle:** Basit yapılı, düşük performanslı nozul.
  - **Bell Nozzle:** Yüksek verimlilik ve düşük ses emisyonları için optimize edilmiş nozul.
- **Egzoz Hızı Optimizasyonu:**
  - Nozzle genişleme oranının (exit diameter / throat diameter) doğru ayarlanması.
  - Ortam basıncı ile egzoz çıkış basıncının dengelenmesi.

### **Pratik Örnekler ve Hesaplamalar**
- **Örnek Hesaplama:** RP-1 / LOX çiftli bir roket motoru için itki kuvveti hesaplaması.
- **Grafiklerin Analizi:** İtki kuvveti, kütle akış hızı ve egzoz hızı zamanla nasıl değişir.

### **Kaynaklar ve Daha Fazlası**
- [Rocket Nozzle Design](https://www.grc.nasa.gov/www/k-12/airplane/nozzle.html)
- [Wikipedia - Rocket Nozzle](https://tr.wikipedia.org/wiki/Roket_nozulu)
""",
                    r"""
**Roket Motoru Tasarımı ve Hesaplamaları - Sayfa 5**

### **5. Performans Optimizasyonu ve Kaynaklar**
- **Performans Optimizasyonu:**
  - Hedef itki kuvvetine ulaşmak için parametrelerin ayarlanması.
  - Yanma hızı, yakıt kalınlığı ve yanma odası basıncının optimizasyonu.
- **Optimizasyon Yöntemleri:**
  - Matematiksel yöntemler (Örneğin, Newton-Raphson Yöntemi).
  - Simülasyon ve modelleme teknikleri.
- **Güvenlik ve Testler:**
  - Roket motoru testlerinin güvenli bir şekilde gerçekleştirilmesi.
  - Malzeme seçimi ve dayanıklılık analizleri.

### **Ek Kaynaklar ve Okumalar**
- [Rocket Propulsion Elements by George P. Sutton](https://www.amazon.com/Rocket-Propulsion-Elements-George-Sutton/dp/0071388449)
- [NASA Glenn Research Center - Rocket Propulsion](https://www.grc.nasa.gov/www/k-12/airplane/rocket.html)
- [Wikipedia - Rocket Design](https://tr.wikipedia.org/wiki/Roket_tasarımı)
- [AIAA (American Institute of Aeronautics and Astronautics)](https://www.aiaa.org/)
- [SpaceX Research and Development](https://www.spacex.com/research)

### **Sonuç**
Roket motoru tasarımı ve hesaplamaları, kapsamlı bir bilgi birikimi ve dikkatli planlama gerektirir. Bu eğitim modülü ile temel prensipleri anlamış ve pratik uygulamalar için gerekli araçlara sahip olabilirsiniz.
"""
                ]

                for content in contents:
                    frame = tk.Frame(self.master, background="#f0f0f0")
                    text_widget = tk.Text(
                        frame,
                        wrap="word",
                        padx=10,
                        pady=10,
                        background="#f0f0f0",
                        font=('Helvetica', 10)
                    )
                    text_widget.insert(tk.END, content)
                    text_widget.config(state=tk.DISABLED)
                    text_widget.pack(expand=True, fill='both')
                    self.pages.append(frame)

            def display_page(self, page_number):
                """Belirli bir sayfayı gösterir."""
                for i, page in enumerate(self.pages):
                    if i == page_number:
                        page.pack(fill='both', expand=True, padx=10, pady=10)
                    else:
                        page.pack_forget()

                # Navigation Buttons'ın durumunu ayarla
                if self.current_page == 0:
                    self.prev_button.config(state='disabled')
                else:
                    self.prev_button.config(state='normal')

                if self.current_page == len(self.pages) - 1:
                    self.next_button.config(text="Kapat", command=self.close_window)
                else:
                    self.next_button.config(text="Sonraki", command=self.next_page)

            def next_page(self):
                """Sonraki sayfaya geçiş yapar veya pencereyi kapatır."""
                if self.current_page < len(self.pages) - 1:
                    self.current_page += 1
                    self.display_page(self.current_page)
                else:
                    self.close_window()

            def prev_page(self):
                """Önceki sayfaya geçiş yapar."""
                if self.current_page > 0:
                    self.current_page -= 1
                    self.display_page(self.current_page)

            def close_window(self):
                """Eğitim modülü penceresini kapatır."""
                self.master.destroy()

        TrainingModule(training_window)

    # -------------------- Özel Yakıt Ekleme --------------------
    def add_custom_fuel(self):
        """Kullanıcının özel yakıt türleri eklemesine izin verir."""

        def save_custom_fuel():
            name = custom_name_entry.get().strip()
            try:
                burn_rate = parse_float(custom_burn_rate_entry.get(), "Yanma Hızı")
                cstar = parse_float(custom_cstar_entry.get(), "Karakteristik Hız")
                length = parse_float(custom_length_entry.get(), "Yakıt Uzunluğu")
                thickness = parse_float(custom_thickness_entry.get(), "Yakıt Kalınlığı")
                fuel_radius = parse_float(custom_fuel_radius_entry.get(), "Yakıt Yarıçapı")

                if not name:
                    raise ValueError("Yakıt adı boş olamaz.")
                if name in self.calculator.solid_fuel_properties:
                    raise ValueError("Bu yakıt türü zaten mevcut.")

                self.calculator.solid_fuel_properties[name] = {
                    "burn_rate": burn_rate,
                    "c_star": cstar,
                    "length": length,
                    "thickness": thickness,
                    "fuel_radius": fuel_radius
                }

                messagebox.showinfo("Başarılı", f"{name} yakıtı başarıyla eklendi.")
                custom_window.destroy()
                # Yeni yakıtı Combobox'a ekleyelim
                self.solid_fuel_var.set(name)
                self.load_solid_defaults(name)
            except ValueError as ve:
                messagebox.showerror("Hata", f"Yakıt eklenemedi.\n{ve}")

        # Varsayılan değerler
        custom_window = tk.Toplevel(self.root)
        custom_window.title("Özel Yakıt Ekle")
        custom_window.geometry("400x350")

        ttk.Label(custom_window, text="Yakıt Adı:", style="Custom.TLabel").grid(row=0, column=0, sticky=tk.W, padx=10,
                                                                                pady=10)
        custom_name_entry = ttk.Entry(custom_window, width=25, style="Custom.TEntry")
        custom_name_entry.grid(row=0, column=1, padx=10, pady=10)

        ttk.Label(custom_window, text="Yanma Hızı (m/s):", style="Custom.TLabel").grid(row=1, column=0, sticky=tk.W,
                                                                                       padx=10, pady=10)
        custom_burn_rate_entry = ttk.Entry(custom_window, width=25, style="Custom.TEntry")
        custom_burn_rate_entry.grid(row=1, column=1, padx=10, pady=10)

        ttk.Label(custom_window, text="Karakteristik Hız (c*):", style="Custom.TLabel").grid(row=2, column=0,
                                                                                             sticky=tk.W, padx=10,
                                                                                             pady=10)
        custom_cstar_entry = ttk.Entry(custom_window, width=25, style="Custom.TEntry")
        custom_cstar_entry.grid(row=2, column=1, padx=10, pady=10)

        ttk.Label(custom_window, text="Yakıt Uzunluğu (m):", style="Custom.TLabel").grid(row=3, column=0, sticky=tk.W,
                                                                                         padx=10, pady=10)
        custom_length_entry = ttk.Entry(custom_window, width=25, style="Custom.TEntry")
        custom_length_entry.grid(row=3, column=1, padx=10, pady=10)

        ttk.Label(custom_window, text="Yakıt Kalınlığı (m):", style="Custom.TLabel").grid(row=4, column=0, sticky=tk.W,
                                                                                          padx=10, pady=10)
        custom_thickness_entry = ttk.Entry(custom_window, width=25, style="Custom.TEntry")
        custom_thickness_entry.grid(row=4, column=1, padx=10, pady=10)

        ttk.Label(custom_window, text="Yakıt Yarıçapı (m):", style="Custom.TLabel").grid(row=5, column=0, sticky=tk.W,
                                                                                         padx=10, pady=10)
        custom_fuel_radius_entry = ttk.Entry(custom_window, width=25, style="Custom.TEntry")
        custom_fuel_radius_entry.grid(row=5, column=1, padx=10, pady=10)

        ttk.Button(custom_window, text="Ekle", command=save_custom_fuel, style="Custom.TButton").grid(row=6, column=0,
                                                                                                      columnspan=2,
                                                                                                      pady=20)

    # -------------------- Optimizasyon Penceresi --------------------
    def open_optimization_window(self):
        """Kullanıcıya hedef itki kuvveti girmesini sağlayan pencereyi açar."""

        def perform_optimization():
            target_thrust = target_entry.get()
            if not target_thrust:
                messagebox.showerror("Hata", "Lütfen hedef itki kuvvetini giriniz.")
                return
            self.optimizer.optimize_parameters(target_thrust)

        optimize_window = tk.Toplevel(self.root)
        optimize_window.title("Parametre Optimizasyonu")
        optimize_window.geometry("350x200")

        ttk.Label(optimize_window, text="Hedef İtki Kuvveti (N):", style="Custom.TLabel").pack(padx=10, pady=20)
        target_entry = ttk.Entry(optimize_window, width=30, style="Custom.TEntry")
        target_entry.pack(padx=10, pady=5)

        ttk.Button(optimize_window, text="Optimizasyonu Başlat", command=perform_optimization,
                   style="Custom.TButton").pack(pady=20)

    # -------------------- Kodun Başlatılması --------------------
    def toggle_frames(self, event=None):
        """Yakıt türüne göre uygun frame'i gösterir/gizler ve varsayılan parametreleri yükler."""
        chosen_type = self.rocket_type_var.get()
        if chosen_type == "Sıvı Yakıt":
            self.liquid_frame.grid(row=1, column=0, columnspan=2, pady=10, sticky="ew")
            self.solid_frame.grid_remove()
            self.load_liquid_defaults()
        elif chosen_type == "Katı Yakıt":
            self.liquid_frame.grid_remove()
            self.solid_frame.grid(row=2, column=0, columnspan=2, pady=10, sticky="ew")
            self.load_solid_defaults(self.solid_fuel_var.get())
        else:
            self.liquid_frame.grid_remove()
            self.solid_frame.grid_remove()


# -------------------- Uygulamayı Başlatma --------------------
if __name__ == "__main__":
    root = tk.Tk()
    app = RocketEngineCalculatorApp(root)
    root.mainloop()
